/******/

// webpackBootstrap

// install a JSONP callback for chunk loading

// The module cache

// object to store loaded and loading chunks

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// Promise = chunk loading, 0 = chunk loaded

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// This file contains only the entry chunk.

// The chunk loading function for additional chunks

// JSONP chunk loading for javascript

// 0 means "already installed".

// a Promise means "currently loading".

// setup Promise in chunk cache

// start chunk loading

// script path function

// create error before stack unwound to get useful stacktrace later

// avoid mem leaks in IE.

// expose the modules object (__webpack_modules__)

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

// on error function for async loading

// Load entry module and return exports

/************************************************************************/

/* 0 */

/***/

/* 1 */

/* harmony export (binding) */

/* 2 */

/* 3 */

// By explicitly using `prop-types` you are opting into new production behavior.

// http://fb.me/prop-types-in-prod

/* 4 */

/* harmony import */

/* 5 */

/* harmony default export */

/* 6 */

/* 7 */

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/extends.js

/*#__PURE__*/

// name and withTheme are invariant in the outer scope

// eslint-disable-next-line react-hooks/rules-of-hooks

// Provide the theme to the wrapped component.

// So we don't have to use the `withTheme()` Higher-order Component.

// EXTERNAL MODULE: ./node_modules/@material-ui/styles/node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/withStyles.js

/* 8 */

/* 9 */

// TODO: Make it private only in v5

/**
   * This will create a new function if the ref props change and are defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior
   */

/* 10 */

/* 11 */

// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.

//

// A strict capitalization should uppercase the first letter of each word a the sentence.

// We only handle the first word.

/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} functions to chain
 * @returns {function|null}
 */

/* 12 */

/* 13 */

/* 14 */

/* 15 */

/* 16 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/slicedToArray.js

/* 17 */

// DCE check should happen before ReactDOM bundle executes so that

// DevTools can report bad minification during injection.

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

// Verify that the code above has been dead code eliminated (DCE'd).

// DevTools shouldn't crash React, no matter what.

// We should still report in case we break this code.

/* 18 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

/* 19 */

/* 20 */

/* 21 */

/* 22 */

/* 23 */

/* 24 */

// Keep in mind that @media is inclusive by the CSS specification.

/* 25 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 26 */

/* 27 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

// we don't care about invariant's own frame

/* 28 */

/* 29 */

/* 30 */

/* 31 */

/* 32 */

/* 33 */

/* 34 */

/* 35 */

/* 36 */

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */

// Don't bother if no value provided

// Force an array if not already something iterable

/*eslint no-param-reassign:0*/

// Iterate over array values

// Iterate over object keys

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */

/* 37 */

/* 38 */

/* 39 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

// EXTERNAL MODULE: ./node_modules/react-router-dom/node_modules/warning/browser.js

/**
 * The public API for putting history on context.
 */

// Do this here so we can setState when a <Redirect> changes the

// location in componentWillMount. This happens e.g. when doing

// server rendering using a <StaticRouter>.

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Router.js

// Written in this round about way for babel-transform-imports

/**
 * The public API for a <Router> that uses HTML5 history.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/BrowserRouter.js

// EXTERNAL MODULE: ./node_modules/react-router-dom/node_modules/history/createHashHistory.js

/**
 * The public API for a <Router> that uses window.location.hash.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/HashRouter.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Link.js

// onClick prevented default

// ignore right clicks

// let browser handle "target=_blank" etc.

// eslint-disable-line no-unused-vars

/**
 * The public API for rendering a history-aware <a>.
 */

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// Two-arg form: push(path, state)

// One-arg form: push(location)

// Resolve incomplete/relative pathname relative to current location.

// When there is no prior location and pathname is empty, set it to /

// TODO: If another transition starts while we're still confirming

// the previous one, we may end up in a weird state. Figure out the

// best way to handle this.

// Return false from a transition hook to cancel the transition.

/**
 * Creates a history object that stores locations in memory.
 */

/**
 * The public API for a <Router> that stores location in memory.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/react-router/es/MemoryRouter.js

// Mimic the behavior of DOM histories by

// causing a render after a cancelled POP.

// the path pattern used to match

// the matched portion of the URL

// whether or not we matched exactly

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/MemoryRouter.js

// <Switch> already computed the match for us

/**
 * The public API for matching a single path and rendering.
 */

// private, from <Switch>

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Route.js

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

/**
 * The public API for prompting the user before navigating away
 * from a screen with a component.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/react-router/es/Prompt.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Prompt.js

/**
 * The public API for updating the location programmatically
 * with a component.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Redirect.js

/**
 * The public API for rendering the first <Route> that matches.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/react-router/es/Switch.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Switch.js

/**
 * A public higher-order component to access the imperative API
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/index.js

/* concated harmony reexport BrowserRouter */

/* unused concated harmony import HashRouter */

/* concated harmony reexport Link */

/* unused concated harmony import MemoryRouter */

/* unused concated harmony import NavLink */

/* unused concated harmony import Prompt */

/* unused concated harmony import Redirect */

/* concated harmony reexport Route */

/* unused concated harmony import Router */

/* unused concated harmony import StaticRouter */

/* concated harmony reexport Switch */

/* unused concated harmony import matchPath */

/* concated harmony reexport withRouter */

/* 48 */

/* unused harmony export easing */

/* unused harmony export formatMs */

/* unused harmony export isString */

/* unused harmony export isNumber */

// This is the most common easing curve.

// Objects enter the screen at full velocity from off-screen and

// slowly decelerate to a resting point.

// Objects leave the screen at full velocity. They do not decelerate when off-screen.

// The sharp curve is used by objects that may return to the screen at any time.

// most basic recommended timing

// this is to be used in complex animations

// recommended when something is entering screen

// recommended when something is leaving screen

/**
 * @param {string|Array} props
 * @param {object} param
 * @param {string} param.prop
 * @param {number} param.duration
 * @param {string} param.easing
 * @param {number} param.delay
 */

// https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

/* 49 */

/* 50 */

/* 51 */

/* 52 */

/* 53 */

// CONCATENATED MODULE: ./src/config/values/default.js

// CONCATENATED MODULE: ./src/config/values/server.js

// CONCATENATED MODULE: ./src/config/values/version.js

// CONCATENATED MODULE: ./src/config/constants.js

/* 54 */

/**
 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
 *
 * @param {function} fn
 */

/* 55 */

/* 56 */

/* 57 */

/* 58 */

/* 59 */

/* 60 */

/* 61 */

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25

/* 62 */

/* 63 */

/* 64 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/iterableToArray.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js

/* 65 */

/* unused harmony export hexToRgb */

/* unused harmony export rgbToHex */

/* unused harmony export hslToRgb */

/* unused harmony export decomposeColor */

/* unused harmony export recomposeColor */

/* unused harmony export getLuminance */

/* unused harmony export emphasize */

/* eslint-disable no-use-before-define */

/**
 * Returns a number whose value is limited to the given range.
 *
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */

/**
 * Converts a color from CSS hex format to CSS rgb format.
 *
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */

/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */

// Idempotent

/**
 * Converts a color object with type and values to a string.
 *
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */

// Only convert the first 3 values to int (i.e. not alpha)

/**
 * Calculates the contrast ratio between two colors.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} A contrast ratio value in the range 0 - 21.
 */

/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} The relative brightness of the color in the range 0 - 1
 */

/**
 * Converts a color from hsl format to rgb format.
 *
 * @param {string} color - HSL color values
 * @returns {string} rgb color values
 */

// Truncate at 3 digits

// normalized

/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/**
 * Set the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} value - value to set the alpha channel to in the range 0 -1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/**
 * Darkens a color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/**
 * Lightens a color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/* 66 */

/* unused harmony export __DO_NOT_USE__ActionTypes */

/* unused harmony export compose */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

// When a store is created, an "INIT" action is dispatched so that every

// reducer returns their initial state. This effectively populates

// the initial state tree.

// This action has a similiar effect to ActionTypes.INIT.

// Any reducers that existed in both the new and old rootReducer

// will receive the previous state. This effectively populates

// the new state tree with any relevant data from the old one.

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

// This is used to make sure we don't warn about the same

// keys multiple times.

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/* 67 */

/* 68 */

/* 69 */

/* 70 */

/* 71 */

/* 72 */

/* 73 */

/* 74 */

/* 75 */

/* 76 */

/* 77 */

/* 78 */

/* 79 */

/* 80 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 81 */

// implementation from standard node.js 'util' module

// old school shim for old browsers

/* 82 */

//console.debug(error);

/* 83 */

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js

/* 84 */

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

// Copyright Joyent, Inc. and other Node contributors.

// Permission is hereby granted, free of charge, to any person obtaining a

// copy of this software and associated documentation files (the

// "Software"), to deal in the Software without restriction, including

// without limitation the rights to use, copy, modify, merge, publish,

// distribute, sublicense, and/or sell copies of the Software, and to permit

// persons to whom the Software is furnished to do so, subject to the

// following conditions:

// The above copyright notice and this permission notice shall be included

// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.

// Since JS doesn't have multiple prototypal inheritance, this class

// prototypally inherits from Readable, and then parasitically from

// Writable.

/*<replacement>*/

/*</replacement>*/

// avoid scope creep, the keys array can then be collected

// the no-half-open enforcer

// if we allow half-open state, or if the writable side ended,

// then we're ok.

// no more data can be written.

// But allow more writes to happen in this tick.

// making it explicit this property is not enumerable

// because otherwise some prototype manipulation in

// userland will fail

// we ignore the value if the stream

// has not been initialized yet

// backward compatibility, the user is explicitly

// managing destroyed

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

/* 95 */

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

// css base code, injected by the css-loader

// return the list of modules as css string

// Adapted from convert-source-map (MIT)

// import a list of modules into the list

// skip already imported module

// this implementation is not 100% perfect for weird media query combinations

//  when a module is imported multiple times with different media queries.

//  I hope this will never occur (Hey this way we have smaller bundles)

/* 96 */

// Test for IE <= 9 as proposed by Browserhacks

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// Tests for existence of standard globals is to allow style-loader

// to operate correctly into non-standard environments

// @see https://github.com/webpack-contrib/style-loader/issues/177

// If passing function in options, then use it for resolve "head" element.

// Useful for Shadow Root style i.e

// {

//   insertInto: function () { return document.querySelector("#foo").shadowRoot }

// }

// Special case to return head of iframe instead of iframe itself

// This will throw an exception if access to iframe is blocked

// due to cross-origin restrictions

// If a transform function was defined, run it on the css

// If the transform function returns a falsy value, don't add this css.

// This allows conditional loading of css

// noop

// If transform returns a value, use that instead of the original css.

// This allows running runtime transformations on the css.

// http://stackoverflow.com/a/26603875

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// tags it will allow on a page

// By default, add <style> tags to the <head> element

// By default, add <style> tags to the bottom of the target

/* 97 */

/* 98 */

/* 99 */

/* 100 */

/* 101 */

/* 102 */

/* WEBPACK VAR INJECTION */

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */

// Return an augmented `Uint8Array` instance, for best performance

// Fallback: Return an object instance of the Buffer class

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

// Common case.

// this throws if `array` is not a valid ArrayBuffer

// Writing a hex string, for example, that contains invalid characters will

// cause everything after the first invalid character to be ignored. (e.g.

// 'abxxcd' will be treated as 'ab')

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */

// Note: cannot use `length < kMaxLength()` here because that fails when

// length is NaN (which is otherwise coerced to zero.)

// Use a for loop to avoid recursion

// assume utf8

// No need to verify that "this.length <= MAX_UINT32" since it's a read-only

// property of a typed array.

// This behaves neither like String nor Uint8Array in that we set start/end

// to their upper/lower bounds if the value passed is out of range.

// undefined is handled specially as per ECMA-262 6th Edition,

// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

// Return early if start > this.length. Done here to prevent potential uint32

// coercion fail below.

// Force coersion to uint32. This will also coerce falsey/NaN values to 0.

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect

// Buffer instances.

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,

// OR the last index of `val` in `buffer` at offset <= `byteOffset`.

// Arguments:

// - buffer - a Buffer to search

// - val - a string, Buffer, or number

// - byteOffset - an index into `buffer`; will be clamped to an int32

// - encoding - an optional encoding, relevant is val is a string

// - dir - true for indexOf, false for lastIndexOf

// Empty buffer means no match

// Normalize byteOffset

// Coerce to Number.

// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer

// Normalize byteOffset: negative offsets start from the end of the buffer

// Normalize val

// Finally, search either indexOf (if dir is true) or lastIndexOf

// Special case: looking for empty string/buffer always fails

// Search for a byte value [0-255]

// must be an even number of digits

// Node's code seems to be doing this and not & 0x7F..

// we did not generate a valid codePoint so insert a

// replacement char (U+FFFD) and advance only 1 byte

// encode to utf16 (surrogate pair dance)

// avoid extra slice()

// Decode in chunks to avoid "call stack size exceeded".

// Based on http://stackoverflow.com/a/22747272/680742, the browser with

// the lowest limit is Chrome, with 0x10000 args.

// We go 1 magnitude less, for safety

// eslint-disable-line eqeqeq

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

// typed array instances can be augmented

// chrome 9-10 lack `subarray`

// ie10 has broken `subarray`

/*
 * Export kMaxLength after typed array support is determined.
 */

// not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/

/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */

// Buffer#write(string)

// Warning: maxLength not taken into account in base64Write

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)

// Copy 0 bytes; we're done

// Fatal error conditions

// Are we oob?

// descending copy from end

// ascending copy from start

// Usage:

//    buffer.fill(number[, offset[, end]])

//    buffer.fill(buffer[, offset[, end]])

//    buffer.fill(string[, offset[, end]][, encoding])

// Handle string cases:

// Invalid ranges are not set to a default, so can range check early.

// HELPER FUNCTIONS

// ================

// is surrogate component

// last char was a lead

// no lead yet

// unexpected trail

// valid lead

// unpaired lead

// 2 leads in a row

// valid surrogate pair

// encode utf8

// Node converts strings with length < 2 to ''

// Node strips out invalid characters like \n and \t from the string, base64-js does not

// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

/* 103 */

// NOTE: These type checking functions intentionally don't use `instanceof`

// because it is fragile and can be easily faked with `Object.create()`.

// ES6 symbol

/* 104 */

/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

/* global define */

/* 105 */

/* 106 */

/* 107 */

/* 108 */

/* 109 */

/* 110 */

/* 111 */

/* 112 */

/* 113 */

/* 114 */

/* 115 */

/* 116 */

/* 117 */

/* 118 */

/* 119 */

/* 120 */

/* 121 */

/* eslint-disable node/no-deprecated-api */

// alternative to using Object.keys for old browsers

// Copy static methods from Buffer

// Copy properties from require('buffer')

/* 122 */

// EXTERNAL MODULE: ./node_modules/react/index.js

// EXTERNAL MODULE: ./node_modules/prop-types/index.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js

// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// encapsulates the subscription logic for connecting a component to the redux store, as

// well as nesting subscriptions of descendant components, so that we can ensure the

// ancestor components re-render before descendants

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/Subscription.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/connectAdvanced.js

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

// If this component received store from props, its subscription should be transparent

// to any descendants receiving store+subscription from context; it passes along

// subscription passed to it. Otherwise, it shadows the parent subscription, which allows

// Connect to control ordering of notifications to flow top-down.

// componentWillMount fires during server side rendering, but componentDidMount and

// componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.

// Otherwise, unsubscription would never take place during SSR, causing a memory leak.

// To handle the case where a child component may have triggered a state change by

// dispatching an action in its componentWillMount, we have to re-run the select and maybe

// re-render.

// wrap the selector in an object that tracks its results between runs.

// parentSub's source should match where store came from: props vs. context. A component

// connected to the store via props shouldn't use subscription from context, or vice versa.

// `notifyNestedSubs` is duplicated to handle the case where the component is  unmounted in

// the middle of the notification loop, where `this.subscription` will then be null. An

// extra null check every change can be avoided by copying the method onto `this` and then

// replacing it with a no-op on unmount. This can probably be avoided if Subscription's

// listeners logic is changed to not call listeners that have been unsubscribed in the

// middle of the notification loop.

// `componentDidUpdate` is conditionally implemented when `onStateChange` determines it

// needs to notify nested subs. Once called, it unimplements itself until further state

// changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does

// a boolean check every time avoids an extra method call most of the time, resulting

// in some perf boost.

// make a shallow copy so that fields added don't leak to the original selector.

// this is especially important for 'ref' since that's a reference back to the component

// instance. a singleton memoized selector would then be holding a reference to the

// instance, preventing the instance from being garbage collected, and that would be bad

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js

// EXTERNAL MODULE: ./node_modules/redux/es/redux.js

// EXTERNAL MODULE: ./node_modules/lodash-es/_freeGlobal.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_objectToString.js

/** Used for built-in method references. */

// CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetTag.js

/** `Object#toString` result references. */

// CONCATENATED MODULE: ./node_modules/lodash-es/_getPrototype.js

/** Built-in value references. */

// CONCATENATED MODULE: ./node_modules/lodash-es/_overArg.js

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

// CONCATENATED MODULE: ./node_modules/lodash-es/isPlainObject.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// whether mapToProps needs to be invoked when props have changed.

// 

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// therefore not reporting its length accurately..

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// this function wraps mapToProps in a proxy function which does several things:

//  * Detects whether the mapToProps function being called depends on props, which

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    

//  * On first call, handles mapToProps if returns another function, and treats that

//    new function as the true mapToProps for subsequent calls.

//  * On first call, verifies the first result is a plain object, in order to warn

//    the developer that their mapToProps function is not returning a valid result.

// allow detectFactoryAndVerify to get ownProps

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/verifySubselectors.js

// TODO: Add more comments

// If pure is true, the selector returned by selectorFactory will memoize its results,

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// props have not changed. If false, the selector will always return a new

// object and shouldComponentUpdate will always return true.

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/connect.js

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

// createConnect with default args builds the 'official' connect behavior. Calling it with

// different options opens up some testing and extensibility scenarios

// used in error messages

// used to compute Connect's displayName from the wrapped component's displayName.

// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes

// passed through to selectorFactory

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

/* concated harmony reexport Provider */

/* unused concated harmony import createProvider */

/* unused concated harmony import connectAdvanced */

/* concated harmony reexport connect */

/* 123 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

// don't hoist over string (html) components

// Avoid failures from read-only properties

/* 124 */

/* 125 */

/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/* 126 */

/* 127 */

/**
 * Expose `pathToRegexp`.
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

// Match escaped characters that would otherwise appear in future matches.

// This allows the user to escape special characters that won't transform.

// Match Express-style parameters and un-named parameters with a prefix

// and optional suffixes. Matches appear as:

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

// Ignore already escaped sequences.

// Push the current path onto the tokens.

// Match any characters still remaining.

// If the path exists, push it onto the end.

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Prepend partial segment prefixes.

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/** @type {!Object} */

// Iterate over the tokens and create our regexp string.

// In non-strict mode we allow a slash at the end of match. If the path to

// match already ends with a slash, we remove it for consistency. The slash

// is valid at the end of a path match, not in the middle. This is important

// in non-ending mode, where "/test/" shouldn't match "/test//route".

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

// Use a negative lookahead to match only capturing groups.

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {!Array} */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {string} */

/* 128 */

/* 129 */

/* 130 */

// We need to centralize the zIndex definitions as they work

// like global values in the browser.

/* 131 */

/* 132 */

/* 133 */

/* 134 */

/* 135 */

/* 136 */

/* 137 */

// EXTERNAL MODULE: ./src/config/constants.js + 3 modules

// CONCATENATED MODULE: ./src/config/datasources/server.js

// CONCATENATED MODULE: ./src/config/datasources/local.js

// CONCATENATED MODULE: ./src/config/data-index.js

/* 138 */

/* unused harmony export styles */

/* Styles applied to the root element. */

/* Styles applied to the root element if `variant="body2"`. */

/* Styles applied to the root element if `variant="body1"`. */

/* Styles applied to the root element if `variant="caption"`. */

/* Styles applied to the root element if `variant="button"`. */

/* Styles applied to the root element if `variant="h1"`. */

/* Styles applied to the root element if `variant="h2"`. */

/* Styles applied to the root element if `variant="h3"`. */

/* Styles applied to the root element if `variant="h4"`. */

/* Styles applied to the root element if `variant="h5"`. */

/* Styles applied to the root element if `variant="h6"`. */

/* Styles applied to the root element if `variant="subtitle1"`. */

/* Styles applied to the root element if `variant="subtitle2"`. */

/* Styles applied to the root element if `variant="overline"`. */

/* Styles applied to the root element if `variant="srOnly"`. Only accessible to screen readers. */

/* Styles applied to the root element if `align="left"`. */

/* Styles applied to the root element if `align="center"`. */

/* Styles applied to the root element if `align="right"`. */

/* Styles applied to the root element if `align="justify"`. */

/* Styles applied to the root element if `align="nowrap"`. */

/* Styles applied to the root element if `gutterBottom={true}`. */

/* Styles applied to the root element if `paragraph={true}`. */

/* Styles applied to the root element if `color="inherit"`. */

/* Styles applied to the root element if `color="primary"`. */

/* Styles applied to the root element if `color="secondary"`. */

/* Styles applied to the root element if `color="textPrimary"`. */

/* Styles applied to the root element if `color="textSecondary"`. */

/* Styles applied to the root element if `color="error"`. */

/* Styles applied to the root element if `display="inline"`. */

/* Styles applied to the root element if `display="block"`. */

/* 139 */

/* 140 */

/* 141 */

/* 142 */

/* 143 */

/* 144 */

/* 145 */

/* 146 */

/* 147 */

/* 148 */

/* 149 */

/* 150 */

/* 151 */

/* 152 */

/* 153 */

/* 154 */

/* 155 */

/* 156 */

/* 157 */

/* 158 */

/* 159 */

/* 160 */

/* 161 */

/* 162 */

/* 163 */

/* 164 */

/* 165 */

/* 166 */

/* 167 */

/* 168 */

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

// Detect buggy property enumeration order in older V8 versions.

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// eslint-disable-line no-new-wrappers

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// We don't expect any of the above to throw, but better to be safe.

/* 169 */

/* 170 */

/* 171 */

// About 1.5x faster than the two-arg version of Array#splice()

// This implementation is based heavily on node's url.parse

// to is absolute

// to is relative, drop the filename

/* 172 */

/* 173 */

/* 174 */

/* 175 */

/* 176 */

/* 177 */

/* global window */

/* 178 */

/* 179 */

/**
 * Converts a color from CSS rgb format to CSS hex format.
 *
 * @param {string} color - RGB color, i.e. rgb(n, n, n)
 * @returns {string} A CSS rgb color string, i.e. #nnnnnn
 */

/* 180 */

/* 181 */

// Wait for jsdom to support the match media feature.

// All the browsers Material-UI support have this built-in.

// This defensive check is here for simplicity.

// Most of the time, the match media logic isn't central to people tests.

/**
       * innerWidth |xs      sm      md      lg      xl
       *            |-------|-------|-------|-------|------>
       * width      |  xs   |  sm   |  md   |  lg   |  xl
       */

// When rendering the component on the server,

// we have no idea about the client browser screen width.

// In order to prevent blinks and help the reconciliation of the React tree

// we are not rendering the child component.

// An alternative is to use the `initialWidth` property.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/withWidth/withWidth.js

// By default, returns true if screen width is the same or greater than the given breakpoint.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Hidden/HiddenJs.js

/**
 * @ignore - internal component.
 */

// `only` check is faster to get out sooner if used.

// Allow `only` to be combined with other props. If already hidden, no need to check others.

// determine visibility based on the smallest size up

/**
   * The content of the component.
   */

/**
   * @ignore
   */

/**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   */

/**
   * You can use this prop when choosing the `js` implementation with server-side rendering.
   *
   * As `window.innerWidth` is unavailable on the server,
   * we default to rendering an empty component during the first mount.
   * You might want to use an heuristic to approximate
   * the screen width of the client browser screen width.
   *
   * For instance, you could be using the user-agent or the client-hints.
   * https://caniuse.com/#search=client%20hint
   */

/**
   * If true, screens this size and down will be hidden.
   */

/**
   * If true, screens this size and up will be hidden.
   */

/**
   * Hide the given breakpoint(s).
   */

/**
   * @ignore
   * width prop provided by withWidth decorator.
   */

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/defineProperty.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Hidden/Hidden.js

/**
 * Responsively hides children based on the selected implementation.
 */

// EXTERNAL MODULE: ./node_modules/react-device-detect/dist/index.js

// CONCATENATED MODULE: ./src/components/core/ui/layout/proxy.js

/* 182 */

/* 183 */

/* 184 */

/* 185 */

/* 186 */

/* 187 */

/* 188 */

/* 189 */

/* 190 */

/* 191 */

/* 192 */

/* 193 */

/* 194 */

/* 195 */

/* 196 */

/* 197 */

/* 198 */

/* 199 */

/* 200 */

/* 201 */

/* 202 */

/* 203 */

/* 204 */

/* 205 */

/* 206 */

/* 207 */

/* 208 */

/* 209 */

/* 210 */

/* 211 */

/* 212 */

/* 213 */

/* 214 */

/* 215 */

/* 216 */

/* 217 */

/* 218 */

/* 219 */

/* 220 */

/* 221 */

/* unused harmony export TRENDS_FETCHED */

/* unused harmony export TRENDS_LOADING */

/* unused harmony export TRENDS_ERROR */

/* unused harmony export TrendsFetched */

/* unused harmony export TrendsLoading */

/* unused harmony export TrendsError */

/* 222 */

/* 223 */

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */

/* 224 */

/* 225 */

// Only Node.JS has a process variable that is of [[Class]] process

// For node use HTTP adapter

// For browsers use XHR adapter

/* Ignore */

/**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */

/* 226 */

// HTTP basic authentication

// Add xsrf header

// This is only done if running in a standard browser environment.

// Specifically not if we're in a web worker, or react-native.

// Set the request timeout in MS

// Listen for ready state

// The request errored out and we didn't get a response, this will be

// handled by onerror instead

// With one exception: request that using file: protocol, most browsers

// will return status as 0 even though it's a successful request

// Prepare the response

// Clean up request

// Handle browser request cancellation (as opposed to a manual cancellation)

// Handle low level network errors

// Real errors are hidden from us by the browser

// onerror should only fire if it's a network error

// Handle timeout

// Add headers to the request

// Add responseType to request if needed

// Remove Content-Type if data is undefined

// Otherwise add header to the request

// Add withCredentials to request if needed

// Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.

// But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.

// Handle progress if needed

// Not all browsers support upload events

// Handle cancellation

// Send the request

/* 227 */

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */

/* 228 */

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */

// eslint-disable-next-line no-param-reassign

/* 229 */

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

/* 230 */

/* 231 */

// The xhr request to example.com may violate some restrictive CSP configurations,

// so if we're running in a browser that supports `fetch`, avoid calling getXHR()

// and assume support for certain features below.

// Cache the xhr value

// If XDomainRequest is available (ie only, where xhr might not work

// cross domain), use the page location. Otherwise use example.com

// Note: this doesn't actually make an http request.

// Service workers don't have XHR

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.

// Safari 7.1 appears to have fixed this bug.

// If fetch is supported, then arraybuffer will be supported too. Skip calling

// checkTypeSupport(), since that calls getXHR().

// These next two tests unavoidably show warnings in Chrome. Since fetch will always

// be used if it's available, just return false for these to avoid the warnings.

// If fetch is supported, then overrideMimeType will be supported too. Skip calling

// getXHR().

/* 232 */

// Fake the 'close' event, but only once 'end' fires

// The nextTick is necessary to prevent the 'request' module from causing an infinite loop

// pipeTo method isn't defined. Can't find a better way to feature test this

// fallback for when writableStream or pipeTo aren't available

// best guess

// For IE9

// This fails in IE8

// Falls through in IE8	

// This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4

// take whole

// reader.onerror = ??? // TODO: this

// The ms-stream case handles end separately in reader.onload()

/* 233 */

/* 234 */

// Duplex streams are both readable and writable, but share

// the same options object.

// However, some cases require setting options to different

// values for the readable and the writable sides of the duplex stream.

// These options can be provided separately as readableXXX and writableXXX.

// object stream flag. Used to make read(n) ignore n and to

// make all the buffer merging and length checks go away

// the point at which it stops calling _read() to fill the buffer

// Note: 0 is a valid value, means "don't call _read preemptively ever"

// cast to ints.

// A linked list is used to store data chunks instead of an array because the

// linked list can remove elements from the beginning faster than

// array.shift()

// a flag to be able to tell if the event 'readable'/'data' is emitted

// immediately, or on a later tick.  We set this to true at first, because

// any actions that shouldn't happen until "later" should generally also

// not happen before the first read call.

// whenever we return null, then we set a flag to say

// that we're awaiting a 'readable' event emission.

// has it been destroyed

// Crypto is kind of old and crusty.  Historically, its default string

// encoding is 'binary' so we have to make this configurable.

// Everything else in the universe uses 'utf8', though.

// the number of writers that are awaiting a drain event in .pipe()s

// if true, a maybeReadMore has been scheduled

// legacy

// emit 'readable' now to make sure it gets picked up.

// Don't emit readable right away in sync mode, because this can trigger

// another read() call => stack overflow.  This way, it might trigger

// a nextTick recursion warning, but that's not so bad.

// if it's past the high water mark, we can push in some more.

// Also, if we have no data yet, we can stand some

// more bytes.  This is to work around cases where hwm=0,

// such as the repl.  Also, if the push() triggered a

// readable event, and the user called read(largeNumber) such that

// needReadable was set, then we ought to push more, so that another

// 'readable' event will be triggered.

// update the buffer info.

// Manually shove something into the read() buffer.

// This returns true if the highWaterMark has not been hit yet,

// similar to how Writable.write() returns true if you should

// write() some more.

// Unshift should *always* be something directly out of read()

// backwards compatibility.

// Don't raise the hwm > 8MB

// This function is designed to be inlinable, so please take care when making

// changes to the function body.

// Only flow one buffer at a time

// If we're asking for more than the current hwm, then raise the hwm.

// Get the next highest power of 2 to prevent increasing hwm excessively in

// tiny amounts

// Don't have enough

// you can override either this method, or the async _read(n) below.

// at this point, the user has presumably seen the 'readable' event,

// and called read() to consume some data.  that may have triggered

// in turn another _read(n) call, in which case reading = true if

// it's in progress.

// However, if we're not ended, or reading, and the length < hwm,

// then go ahead and try to read some more preemptively.

// abstract method.  to be overridden in specific implementation classes.

// call cb(er, data) where data is <= n in length.

// for virtual (non-string, non-buffer) streams, "length" is somewhat

// arbitrary, and perhaps not very meaningful.

// pause() and resume() are remnants of the legacy readable stream API

// If the user uses them, then switch into old mode.

// wrap an old-style stream as the async data source.

// This is *not* part of the readable stream interface.

// It is an ugly unfortunate mess of history.

// Pluck off n bytes from an array of buffers.

// Length is the combined lengths of all the buffers in the list.

// nothing buffered

// read it all, truncate the list

// read part of list

// Extracts only enough buffered data to satisfy the amount requested.

// slice is the same for buffers and strings

// first chunk is a perfect match

// Copies a specified amount of characters from the list of buffered data

// chunks.

// Copies a specified amount of bytes from the list of buffered data chunks.

// If we get here before consuming all the bytes, then that is a

// bug in node.  Should never happen.

// Check that we didn't get one last unshift.

// if we're doing read(0) to trigger a readable event, but we

// already have a bunch of data in the buffer, then just trigger

// the 'readable' event and move on.

// if we've ended, and we're now clear, then finish it up.

// All the actual chunk generation logic needs to be

// *below* the call to _read.  The reason is that in certain

// synthetic stream cases, such as passthrough streams, _read

// may be a completely synchronous operation which may change

// the state of the read buffer, providing enough data when

// before there was *not* enough.

// So, the steps are:

// 1. Figure out what the state of things will be after we do

// a read from the buffer.

// 2. If that resulting state will trigger a _read, then call _read.

// Note that this may be asynchronous, or synchronous.  Yes, it is

// deeply ugly to write APIs this way, but that still doesn't mean

// that the Readable class should behave improperly, as streams are

// designed to be sync/async agnostic.

// Take note if the _read call is sync or async (ie, if the read call

// has returned yet), so that we know whether or not it's safe to emit

// 'readable' etc.

// 3. Actually pull the requested chunks out of the buffer and return.

// if we need a readable event, then we need to do some reading.

// if we currently have less than the highWaterMark, then also read some

// however, if we've ended, then there's no point, and if we're already

// reading, then it's unnecessary.

// if the length is currently zero, then we *need* a readable event.

// call internal read method

// If _read pushed data synchronously, then `reading` will be false,

// and we need to re-evaluate how much data we can return to the user.

// If we have nothing in the buffer, then we want to know

// as soon as we *do* get something into the buffer.

// If we tried to read() past the EOF, then emit end on the next tick.

// cleanup event handlers once the pipe is broken

// if the reader is waiting for a drain event from this

// specific writer, then it would cause it to never start

// flowing again.

// So, if this is awaiting a drain, then we just call it now.

// If we don't know, then assume that we are waiting for one.

// when the dest drains, it reduces the awaitDrain counter

// on the source.  This would be more elegant with a .once()

// handler in flow(), but adding and removing repeatedly is

// too slow.

// If the user pushes more data while we're writing to dest then we'll end up

// in ondata again. However, we only want to increase awaitDrain once because

// dest will only emit one 'drain' event for the multiple writes.

// => Introduce a guard on increasing awaitDrain.

// If the user unpiped during `dest.write()`, it is possible

// to get stuck in a permanently paused state if that write

// also returned false.

// => Check whether `dest` is still a piping destination.

// if the dest has an error, then stop piping into it.

// however, don't suppress the throwing behavior for this.

// Make sure our error handler is attached before userland ones.

// Both close and finish should trigger unpipe, but only once.

// tell the dest that it's being piped to

// Sadly this is not cacheable as some libraries bundle their own

// event emitter implementation with them.

// This is a hack to make sure that our error handler is attached before any

// userland ones.  NEVER DO THIS. This is here only because this code needs

// to continue to work with older versions of Node.js that do not include

// the prependListener() method. The goal is to eventually remove this hack.

// start the flow if it hasn't been started already.

// if we're not piping anywhere, then do nothing.

// just one destination.  most common case.

// passed in one, but it's not the right one.

// got a match.

// slow case. multiple pipe destinations.

// remove all.

// try to find the right one.

// set up data events if they are asked for

// Ensure readable listeners eventually get something

// Start flowing on next tick if stream isn't explicitly paused

// proxy all the other methods.

// important when wrapping filters and duplexes.

// don't skip over falsy values in objectMode

// proxy certain important events.

// when we try to consume some more bytes, simply unpause the

// underlying stream.

// exposed for testing purposes only.

/* 235 */

// Backwards-compat with node 0.10.x

// By default EventEmitters will print a warning if more than 10 listeners are

// added to it. This is a useful default which helps finding memory leaks.

// To avoid recursion in the case that type === "newListener"! Before

// adding it to the listeners, first emit "newListener".

// Re-assign `events` because a newListener handler could have caused the

// this._events to be assigned to a new object

// Optimize the case of one listener. Don't need the extra array object.

// Adding the second element, need to change to array.

// Check for listener leak

// No error code for this since it is a Warning

// eslint-disable-next-line no-restricted-syntax

// Obviously not all Emitters should be limited to 10. This function allows

// that to be increased. Set to zero for unlimited.

// If there is no 'error' event listener then throw.

// Note: The comments on the `throw` lines are intentional, they show

// up in Node's output if this results in an unhandled exception.

// Unhandled 'error' event

// At least give some kind of context to the user

// Emits a 'removeListener' event if and only if the listener was removed.

// not listening for removeListener, no need to emit

// emit removeListener for all listeners on all events

// LIFO order

/* 236 */

/* 237 */

// undocumented cb() API, needed for core, not for public API

// we set destroyed to true before firing error callbacks in order

// to make it re-entrance safe in case destroy() is called within callbacks

// if this is a duplex stream mark the writable part as destroyed as well

/* 238 */

// A bit simpler than readable streams.

// Implement an async ._write(chunk, encoding, cb), and it'll handle all

// the drain event emission and buffering.

// It seems a linked list but it is not

// there will be only 2 of these for each stream

/* </replacement> */

// object stream flag to indicate whether or not this stream

// contains buffers or objects.

// the point at which write() starts returning false

// Note: 0 is a valid value, means that we always return false if

// the entire buffer is not flushed immediately on write()

// if _final has been called

// drain event flag.

// at the start of calling end()

// when end() has been called, and returned

// when 'finish' is emitted

// should we decode strings into buffers before passing to _write?

// this is here so that some node-core streams can optimize string

// handling at a lower level.

// not an actual buffer we keep track of, but a measurement

// of how much we're waiting to get pushed to some underlying

// socket or file.

// a flag to see when we're in the middle of a write.

// when true all writes will be buffered until .uncork() call

// a flag to be able to tell if the onwrite cb is called immediately,

// or on a later tick.  We set this to true at first, because any

// actions that shouldn't happen until "later" should generally also

// not happen before the first write call.

// a flag to know if we're processing previously buffered items, which

// may call the _write() callback in the same tick, so that we don't

// end up in an overlapped onwrite situation.

// the callback that's passed to _write(chunk,cb)

// defer the callback if we are being called synchronously

// to avoid piling up things on the stack

// this can emit finish, and it will always happen

// after error

// the caller expect this to happen before if

// it is async

// this can emit finish, but finish must

// always follow error

// Check if we're actually ready to finish, but don't emit yet

// the callback that the user supplies to write(chunk,encoding,cb)

// the amount that is being written when _write is called.

// number of pending user-supplied write callbacks

// this must be 0 before 'finish' can be emitted

// emit prefinish if the only thing we're waiting for is _write cbs

// This is relevant for synchronous Transform streams

// True if the error was already emitted and should not be thrown again

// count buffered requests

// allocate the first CorkedRequest, there is always

// one allocated and free to use, and we maintain at most two

// Writable ctor is applied to Duplexes, too.

// `realHasInstance` is necessary because using plain `instanceof`

// would return false, as no `_writableState` property is attached.

// Trying to use the custom `instanceof` for Writable here will also break the

// Node.js LazyTransform implementation, which has a non-trivial getter for

// `_writableState` that would lead to infinite recursion.

// legacy.

// Otherwise people can pipe Writable streams, which is just wrong.

// Must force callback to be called on nextTick, so that we don't

// emit 'drain' before the write() consumer gets the 'false' return

// value, and has a chance to attach a 'drain' listener.

// if there's something in the buffer waiting, then process it

// Fast case, write everything using _writev()

// doWrite is almost always async, defer these to save a bit of time

// as the hot path ends with doWrite

// Slow case, write chunks one-by-one

// if we didn't call the onwrite immediately, then

// it means that we need to wait until it does.

// also, that means that the chunk and cb are currently

// being processed, so move the buffer counter past them.

// TODO: defer error events consistently everywhere, not just the cb

// Checks that a user-supplied chunk is valid, especially for the particular

// mode the stream is in. Currently this means that `null` is never accepted

// and undefined/non-string values are only allowed in object mode.

// if we're already writing something, then just put this

// in the queue, and wait our turn.  Otherwise, call _write

// If we return false, then we need a drain event, so set that flag.

// we must ensure that previous needDrain will not be reset to false.

// node::ParseEncoding() requires lower case.

// .end() fully uncorks

// ignore unnecessary end() calls.

/* 239 */

// Do not cache `Buffer.isEncoding` when checking encoding names as some

// modules monkey-patch it to support additional encodings

// undefined

// StringDecoder provides an interface for efficiently splitting a series of

// buffers into a series of JS strings without breaking apart multi-byte

// characters.

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a

// continuation byte. If an invalid byte is detected, -2 is returned.

// Checks at most 3 bytes at the end of a Buffer in order to detect an

// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)

// needed to complete the UTF-8 character (if applicable) are returned.

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.

// Validates as many continuation bytes for a multi-byte UTF-8 character as

// needed or are available. If we see a non-continuation byte where we expect

// one, we "replace" the validated continuation bytes we've seen so far with

// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding

// behavior. The continuation byte check is included three times in the case

// where all of the continuation bytes for a character exist in the same buffer.

// It is also done this way as a slight performance increase instead of using a

// loop.

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a

// partial character, the character's bytes are buffered until the required

// number of bytes are available.

// UTF-16LE typically needs two bytes per character, but even if we have an even

// number of bytes available, we need to check if we end on a leading/high

// surrogate. In that case, we need to wait for the next two bytes in order to

// decode the last character properly.

// For UTF-16LE we do not explicitly append special replacement characters if we

// end on a partial character, we simply let v8 handle that.

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)

// For UTF-8, a replacement character is added when ending on a partial

// character.

// Returns only complete characters in a Buffer

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

/* 240 */

// a transform stream is a readable/writable stream where you do

// something with the data.  Sometimes it's called a "filter",

// but that's not a great name for it, since that implies a thing where

// some bits pass through, and others are simply ignored.  (That would

// be a valid example of a transform, of course.)

// While the output is causally related to the input, it's not a

// necessarily symmetric or synchronous transformation.  For example,

// a zlib stream might take multiple plain-text writes(), and then

// emit a single compressed chunk some time in the future.

// Here's how this works:

// The Transform stream has all the aspects of the readable and writable

// stream classes.  When you write(chunk), that calls _write(chunk,cb)

// internally, and returns false if there's a lot of pending writes

// buffered up.  When you call read(), that calls _read(n) until

// there's enough pending readable data buffered up.

// In a transform stream, the written data is placed in a buffer.  When

// _read(n) is called, it transforms the queued up data, calling the

// buffered _write cb's as it consumes chunks.  If consuming a single

// written chunk would result in multiple output chunks, then the first

// outputted bit calls the readcb, and subsequent chunks just go into

// the read buffer, and will cause it to emit 'readable' if necessary.

// This way, back-pressure is actually determined by the reading side,

// since _read has to be called to start processing a new chunk.  However,

// a pathological inflate type of transform can cause excessive buffering

// here.  For example, imagine a stream where every byte of input is

// interpreted as an integer from 0-255, and then results in that many

// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in

// 1kb of data being output.  In this case, you could write a very small

// amount of input, and end up with a very large amount of output.  In

// such a pathological inflating mechanism, there'd be no way to tell

// the system to stop doing the transform.  A single 4MB write could

// cause the system to run out of memory.

// However, even in such a pathological case, only a single written chunk

// would be consumed, and then the rest would wait (un-transformed) until

// the results of the previous transformed chunk were consumed.

// single equals check for both `null` and `undefined`

// start out asking for a readable event once data is transformed.

// we have implemented the _read method, and done the other things

// that Readable wants before the first _read call, so unset the

// sync guard flag.

// When the writable side finishes, then flush out anything remaining.

// if there's nothing in the write buffer, then that means

// that nothing more will ever be provided

// This is the part where you do stuff!

// override this function in implementation classes.

// 'chunk' is an input chunk.

// Call `push(newChunk)` to pass along transformed output

// to the readable side.  You may call 'push' zero or more times.

// Call `cb(err)` when you are done with this chunk.  If you pass

// an error, then that'll put the hurt on the whole operation.  If you

// never call cb(), then you'll never get another chunk.

// Doesn't matter what the args are here.

// _transform does all the work.

// That we got here means that the readable side wants more data.

// mark that we need a transform, so that any data that comes in

// will get processed, now that we've asked for it.

/* 241 */

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be

// compiled once on the first module load.

// format a parsed object into a url string

// ensure it's an object, and not a string url.

// If it's an obj, this is a no-op.

// this way, you can call url_format() on strings

// to clean up potentially wonky urls.

// Special case for a simple path URL

// RFC 2396: characters not allowed for various reasons.

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.

// Characters that are never ever allowed in a hostname.

// Note that any invalid chars are also handled, but these

// are the ones that are *expected* to be seen, so we fast-path

// them.

// protocols that can allow "unsafe" and "unwise" chars.

// protocols that never have a hostname.

// protocols that always contain a // bit.

// Copy chrome, IE, opera backslash-handling behavior.

// Back slashes before the query string get converted to forward slashes

// See: https://code.google.com/p/chromium/issues/detail?id=25916

// trim before proceeding.

// This is to support parse stuff like "  http://foo.com  \n"

// Try fast path regexp

// figure out if it's got a host

// user@server is *always* interpreted as a hostname, and url

// resolution will treat //foo/bar as host=foo,path=bar because that's

// how the browser resolves relative URLs.

// there's a hostname.

// the first instance of /, ?, ;, or # ends the host.

// If there is an @ in the hostname, then non-host chars *are* allowed

// to the left of the last @ sign, unless some host-ending character

// comes *before* the @-sign.

// URLs are obnoxious.

// ex:

// http://a@b@c/ => user:a@b host:c

// http://a@b?@c => user:a host:c path:/?@c

// v0.12 TODO(isaacs): This is not quite how Chrome does things.

// Review our test case against browsers more comprehensively.

// find the first instance of any hostEndingChars

// at this point, either we have an explicit point where the

// auth portion cannot go past, or the last @ char is the decider.

// Now we have a portion which is definitely the auth.

// Pull that off.

// atSign can be anywhere.

// the host is the remaining to the left of the first non-host char

// if we still have not hit it, then the entire thing is a host.

// pull out port.

// we've indicated that there is a hostname,

// so even if it's empty, it has to be present.

// if hostname begins with [ and ends with ]

// assume that it's an IPv6 address.

// validate a little.

// we replace non-ASCII char with a temporary placeholder

// we need this to make sure size of hostname is not

// broken by replacing non-ASCII by nothing

// we test again with ASCII char only

// hostnames are always lower case.

// IDNA Support: Returns a punycoded representation of "domain".

// It only converts parts of the domain name that

// have non-ASCII characters, i.e. it doesn't matter if

// you call it with a domain that already is ASCII-only.

// strip [ and ] from the hostname

// the host field still retains them, though

// now rest is set to the post-host stuff.

// chop off any delim chars.

// First, make 100% sure that any "autoEscape" chars get

// escaped, even if encodeURIComponent doesn't think they

// need to be.

// chop off from the tail first.

// got a fragment string.

//to support http.request

// no query string, but parseQueryString still requested

// finally, reconstruct the href based on what has been validated.

// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.

// unless they had them to begin with.

// hash is always overridden, no matter what.

// even href="" will remove it.

// if the relative url is empty, then there's nothing left to do here.

// hrefs like //foo/bar always cut to the protocol.

// take everything except the protocol from relative

//urlParse appends trailing / to urls like http://www.example.com

// if it's a known url protocol, then changing

// the protocol does weird things

// first, if it's not file:, then we MUST have a host,

// and if there was a path

// to begin with, then we MUST have a path.

// if it is file:, then the host is dropped,

// because that's known to be hostless.

// anything else is assumed to be absolute.

// to support http.request

// if the url is a non-slashed url, then relative

// links like ../.. should be able

// to crawl up to the hostname, as well.  This is strange.

// result.protocol has already been set by now.

// Later on, put the first path part into the host field.

// it's absolute.

// it's relative

// throw away the existing file, and take the new path instead.

// just pull out the search.

// like href='?foo'.

// Put this after the other two cases because it simplifies the booleans

// no path at all.  easy.

// we've already handled the other stuff above.

// if a url ENDs in . or .., then it must get a trailing slash.

// however, if it ends in anything else non-slashy,

// then it must NOT get a trailing slash.

// if the path is allowed to go above the root, restore leading ..s

// put the host back

//to support request.http

/* 242 */

/* unused harmony export PAGEHOME_FETCHED */

/* unused harmony export PAGEHOME_LOADING */

/* unused harmony export PAGEHOME_ERROR */

/* unused harmony export PagehomeFetched */

/* unused harmony export PagehomeLoading */

/* unused harmony export PagehomeError */

/* 243 */

/* 244 */

/* 245 */

/* 246 */

/* harmony reexport (safe) */

/* 247 */

/* Styles applied to the root element if `color="action"`. */

/* Styles applied to the root element if `color="disabled"`. */

/* Styles applied to the root element if `fontSize="inherit"`. */

/* Styles applied to the root element if `fontSize="small"`. */

/* Styles applied to the root element if `fontSize="large"`. */

/* 248 */

/* 249 */

/* 250 */

/** Detect free variable `global` from Node.js. */

/* 251 */

/* 252 */

/* 253 */

/* 254 */

/* 255 */

/* 256 */

/* 257 */

// Component.peek comes from react-side-effect:

// For testing, you may use a static peek() method available on the returned component.

// It lets you get the current state without resetting the mounted instance stack.

// Don’t use it for anything other than testing.

/**
             * @param {Object} base: {"target": "_blank", "href": "http://mysite.com/"}
             * @param {Object} bodyAttributes: {"className": "root"}
             * @param {String} defaultTitle: "Default Title"
             * @param {Boolean} defer: true
             * @param {Boolean} encodeSpecialCharacters: true
             * @param {Object} htmlAttributes: {"lang": "en", "amp": undefined}
             * @param {Array} link: [{"rel": "canonical", "href": "http://mysite.com/example"}]
             * @param {Array} meta: [{"name": "description", "content": "Test description"}]
             * @param {Array} noscript: [{"innerHTML": "<img src='http://mysite.com/js/test.js'"}]
             * @param {Function} onChangeClientState: "(newState) => console.log(newState)"
             * @param {Array} script: [{"type": "text/javascript", "src": "http://mysite.com/js/test.js"}]
             * @param {Array} style: [{"type": "text/css", "cssText": "div { display: block; color: blue; }"}]
             * @param {String} title: "Title"
             * @param {Object} titleAttributes: {"itemprop": "name"}
             * @param {String} titleTemplate: "MySite.com - %s"
             */

// provide fallback if mappedState is undefined

/* 258 */

/* 259 */

/* 260 */

/* 261 */

/* 262 */

/* 263 */

/* 264 */

/* 265 */

/* 266 */

/* 267 */

/* 268 */

/* 269 */

/* 270 */

/* 271 */

/* 272 */

/* 273 */

/* 274 */

/* 275 */

/* 276 */

/* 277 */

/* 278 */

/* 279 */

/* 280 */

/* 281 */

/* 282 */

/* 283 */

/* 284 */

/* 285 */

// We always will resolve, errors should be handled within loading UIs.

/* 286 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/is-plain-object/index.js

/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/isobject/index.js

/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

// If has modified constructor

// If has modified prototype

// EXTERNAL MODULE: ./node_modules/warning/warning.js

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/styles/createBreakpoints.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/createMixins.js

// import warning from 'warning';

// To deprecate in v4.1

//       warning(

//         false,

//         [

//           'Material-UI: theme.mixins.gutters() is deprecated.',

//           'You can use the source of the mixin directly:',

//           `

// paddingLeft: theme.spacing(2),

// paddingRight: theme.spacing(2),

// [theme.breakpoints.up('sm')]: {

//   paddingLeft: theme.spacing(3),

//   paddingRight: theme.spacing(3),

// },

// `,

//         ].join('\n'),

//       );

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/colors/indigo.js

// The colors used to style the text.

// The most important text.

// Secondary text.

// Disabled text have even lower visual prominence.

// Text hints.

// The color used to divide different elements.

// The background colors used to style the surfaces.

// Consistency between these values is important.

// The colors used to style the action elements.

// The color of an active action like an icon button.

// The color of an hovered action.

// The color of a selected action.

// The color of a disabled action.

// The background color of a disabled action.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/createTypography.js

// < 1kb payload overhead when lodash/merge is > 3kb.

/**
 * @see @link{https://material.io/design/typography/the-type-system.html}
 * @see @link{https://material.io/design/typography/understanding-typography.html}
 */

// Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/shadows.js

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/styles/transitions.js

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/styles/zIndex.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/createMuiTheme.js

// Use the same logic as

// Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59

// and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54

// A collection of common colors.

// The palette type, can be light or dark.

// The colors used to represent primary interface elements for a user.

// The colors used to represent secondary interface elements for a user.

// The colors used to represent interface elements that the user should be made aware of.

// The grey colors.

// Used by `getContrastText()` to maximize the contrast between the background and

// the text.

// Take a background color and return the color of the text to maximize the contrast.

// Generate a rich color object.

// Used by the functions below to shift a color's luminance by approximately

// two indexes within its tonal palette.

// E.g., shift from Red 500 to Red 300 or Red 700.

// Already transformed.

// All components align to an 8dp square baseline grid for mobile, tablet, and desktop.

// https://material.io/design/layout/understanding-layout.html#pixel-density

// Backward compatibility, to remove in v5.

// Inject custom styles

// Inject custom props

/* 287 */

// Default CSS values

// flex: '0 1 auto',

// flexDirection: 'row',

// alignItems: 'flex-start',

// flexWrap: 'nowrap',

// justifyContent: 'flex-start',

/* Styles applied to the root element */

/* Styles applied to the root element if `container={true}`. */

/* Styles applied to the root element if `item={true}`. */

/* Styles applied to the root element if `zeroMinWidth={true}`. */

/* Styles applied to the root element if `direction="column"`. */

/* Styles applied to the root element if `direction="column-reverse"`. */

/* Styles applied to the root element if `direction="rwo-reverse"`. */

/* Styles applied to the root element if `wrap="nowrap"`. */

/* Styles applied to the root element if `wrap="reverse"`. */

/* Styles applied to the root element if `alignItems="center"`. */

/* Styles applied to the root element if `alignItems="flex-start"`. */

/* Styles applied to the root element if `alignItems="flex-end"`. */

/* Styles applied to the root element if `alignItems="baseline"`. */

/* Styles applied to the root element if `alignContent="center"`. */

/* Styles applied to the root element if `alignContent="flex-start"`. */

/* Styles applied to the root element if `alignContent="flex-end"`. */

/* Styles applied to the root element if `alignContent="space-between"`. */

/* Styles applied to the root element if `alignContent="space-around"`. */

/* Styles applied to the root element if `justify="center"`. */

/* Styles applied to the root element if `justify="flex-end"`. */

/* Styles applied to the root element if `justify="space-between"`. */

/* Styles applied to the root element if `justify="space-around"`. */

/* Styles applied to the root element if `justify="space-evenly"`. */

// Use side effect over immutability for better performance.

// Keep 7 significant numbers.

// Close to the bootstrap implementation:

// https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41

// For the auto layouting

// No need for a media query for the first size.

/* 288 */

//return `${this.getLinkToTrend(trendInfo)}/view/${view}`;

//return `${this.getLinkToTrend(trendInfo)}/topic/${encodeURIComponent(topic)}`;

/* 289 */

/* 290 */

/* 291 */

// module.parent = undefined by default

/* 292 */

/* 293 */

/* 294 */

/* 295 */

/* 296 */

/* 297 */

/* 298 */

/* 299 */

/* 300 */

/* 301 */

/* 302 */

/* 303 */

/* 304 */

/* 305 */

/* 306 */

/* 307 */

/* 308 */

/* 309 */

/* 310 */

/* 311 */

/* 312 */

/* 313 */

/* 314 */

/* 315 */

/* 316 */

/* 317 */

/* 318 */

/* 319 */

/* 320 */

/* 321 */

/* 322 */

/* 323 */

/* 324 */

/* 325 */

/* 326 */

/* 327 */

/* 328 */

/* 329 */

/* 330 */

/* 331 */

/* 332 */

/* 333 */

/* 334 */

/* 335 */

/* 336 */

/* 337 */

/* 338 */

/* 339 */

/* 340 */

/* 341 */

/* 342 */

/* 343 */

/* 344 */

/* 345 */

/* 346 */

/* 347 */

/* 348 */

/* 349 */

/* 350 */

/* 351 */

/* 352 */

/* 353 */

/* 354 */

/* 355 */

/* 356 */

/* 357 */

/* 358 */

/* 359 */

/* 360 */

/* 361 */

/* 362 */

/* 363 */

/* 364 */

/* 365 */

/* 366 */

/* 367 */

/* 368 */

/* 369 */

/* 370 */

/* 371 */

/* 372 */

/* 373 */

/* 374 */

/* 375 */

/* 376 */

/* 377 */

/* 378 */

/* 379 */

/* 380 */

/* 381 */

/* 382 */

/* 383 */

/* 384 */

/* 385 */

/* 386 */

/* 387 */

/* 388 */

/* 389 */

/* 390 */

/* 391 */

/* 392 */

/* 393 */

/* 394 */

/* 395 */

/* 396 */

/* 397 */

/* 398 */

/* 399 */

/* 400 */

/* 401 */

/* 402 */

/* 403 */

/* 404 */

/* 405 */

/* 406 */

/* 407 */

/* 408 */

/* 409 */

/* 410 */

/* 411 */

/* 412 */

/* 413 */

/* 414 */

/* 415 */

/* 416 */

/* 417 */

/* 418 */

/* 419 */

/* 420 */

/* 421 */

/* 422 */

/* 423 */

/* 424 */

/* 425 */

/* 426 */

/* 427 */

/* 428 */

/* 429 */

/* 430 */

/* 431 */

/* 432 */

/* 433 */

/* 434 */

/* 435 */

/* 436 */

/* 437 */

/* 438 */

/* 439 */

/* 440 */

/* 441 */

/* 442 */

/* 443 */

/* 444 */

/* 445 */

/* 446 */

/* 447 */

/* 448 */

/* 449 */

/* 450 */

/* 451 */

/* 452 */

/* 453 */

/* 454 */

/* 455 */

/* 456 */

/* 457 */

/* 458 */

/* 459 */

/* 460 */

/* 461 */

/* 462 */

/* 463 */

/* 464 */

/* 465 */

/* 466 */

/* 467 */

/* 468 */

/* 469 */

/* 470 */

/* 471 */

/* 472 */

/* 473 */

/* 474 */

/* 475 */

/* 476 */

/* 477 */

/* 478 */

/* 479 */

/* 480 */

/* 481 */

/* 482 */

/* 483 */

/* 484 */

/* 485 */

/* 486 */

/* 487 */

/* 488 */

/* 489 */

/* 490 */

/* 491 */

/* 492 */

/* 493 */

/* 494 */

/* 495 */

/* 496 */

/* 497 */

/* 498 */

/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 499 */

/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/* 500 */

/* 501 */

/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 502 */

// Important!

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

/* 503 */

/* 504 */

/* 505 */

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */

// Copy axios.prototype to instance

// Copy context to instance

// Create the default instance to be exported

// Expose Axios class to allow class inheritance

// Factory for creating new instances

// Expose Cancel & CancelToken

// Expose all/spread

// Allow use of default import syntax in TypeScript

/* 506 */

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/* 507 */

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */

// Allow for axios('example/url'[, config]) a la fetch API

// Hook up interceptors middleware

// Provide aliases for supported request methods

/*eslint func-names:0*/

/* 508 */

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */

/* 509 */

/**
 * Throws a `Cancel` if cancellation has been requested.
 */

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */

// Support baseURL config

// Ensure headers exist

// Transform request data

// Flatten headers

// Transform response data

/* 510 */

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */

/* 511 */

/* 512 */

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */

/* 513 */

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

// Standard

// Microsoft

// Mozilla

// Axios

/* 514 */

// Headers whose duplicates are ignored by node

// c.f. https://nodejs.org/api/http.html#http_message_headers

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

/* 515 */

// Standard browser envs have full support of the APIs needed to test

// whether the request URL is of the same origin as current location.

/**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */

// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

// IE needs attribute set twice to normalize properties

/**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */

/* 516 */

/* 517 */

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

// A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).

// RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed

// by any combination of letters, digits, plus, period, or hyphen.

/* 518 */

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

/* 519 */

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */

/* 520 */

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

/* 521 */

// Normally, the page is loaded from http or https, so not specifying a protocol

// will result in a (valid) protocol-relative url. However, this won't work if

// the protocol is something else, like 'file:'

// Necessary for IPv6 addresses

// This may be a relative url. The browser should always be able to interpret it correctly.

// Also valid opts.auth, opts.mode

/* 522 */

// If the use of XHR should be preferred. Not typically needed.

// If streaming is a high priority but binary compatibility and

// the accuracy of the 'content-type' header aren't

// If streaming is more important than preserving the 'content-type' header

// Use binary if text streaming may corrupt data or the content-type header, or for speed

// This check is not necessary, but it prevents warnings from browsers about setting unsafe

// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but

// http-browserify did it, so I will too.

// create flattened list of headers

// Can't set responseType on really old browsers

// Necessary for streaming in Firefox, since xhr.response is ONLY defined

// in onprogress, not in onreadystatechange with xhr.readyState = 3

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method

/* 523 */

// base64 is 4/3 + up to two characters of the original data

// must be multiple of 3

// go through the array every three bytes, we'll deal with trailing stuff later

// pad the end with zeros, but make sure to not forget the extra bytes

// Support decoding URL-safe base64 strings, as Node.js does.

// See: https://en.wikipedia.org/wiki/Base64#URL_applications

// Trim off extra bytes after placeholder bytes are found

// See: https://github.com/beatgammit/base64-js/issues/42

/* 524 */

/* 525 */

/* (ignored) */

/* 526 */

/* 527 */

/* 528 */

// DOM APIs, for completeness

// Does not start the time, just sets up the members needed.

// setimmediate attaches itself to the global object

// On some exotic environments, it's not clear which object `setimmediate` was

// able to install onto.  Search each possibility in the same order as the

// `setimmediate` library.

/* 529 */

// Spec says greater than zero

// Don't get fooled by e.g. browserify environments.

// The test against `importScripts` prevents this implementation from being installed inside a web worker,

// where `global.postMessage` means something completely different and can't be used for this purpose.

// For web workers, where supported

// For IE 6–8

// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted

// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.

// For non-IE10 modern browsers

// Callback can either be a function or a string

// Copy function arguments

// Store and register the task

// From the spec: "Wait until any invocations of this algorithm started before this one have completed."

// So if we're currently running a task, we'll need to delay this invocation.

// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a

// "too much recursion" error.

/* 530 */

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

// accessing global.localStorage can trigger a DOMException in sandboxed iframes

/**
 * Module exports.
 */

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

/* 531 */

// a passthrough stream.

// basically just the most minimal sort of Transform stream.

// Every written chunk gets output as-is.

/* 532 */

// If the buffer is backed by a Uint8Array, a faster version will work

// If the buffer isn't a subarray, return the underlying ArrayBuffer

// Otherwise we need to get a proper copy

// This is the slow version that will work with any Buffer

// implementation (even in old browsers)

/* 533 */

/* 534 */

/* 535 */

/*! https://mths.be/punycode v1.4.1 by @mathias */

/** Detect free variables */

/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */

/** Highest positive signed 32-bit float value */

// aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */

// 0x80

// '\x2D'

/** Regular expressions */

// unprintable ASCII chars + non-ASCII chars

// RFC 3490 separators

/** Error messages */

/** Convenience shortcuts */

/*--------------------------------------------------------------------------*/

/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */

/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */

/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */

// In email addresses, only the domain name should be punycoded. Leave

// the local part (i.e. everything up to `@`) intact.

// Avoid `split(regex)` for IE8 compatibility. See #17.

/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */

// high surrogate, and there is a next character

// low surrogate

// unmatched surrogate; only append this code unit, in case the next

// code unit is the high surrogate of a surrogate pair

/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */

/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */

/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */

//  0..25 map to ASCII a..z or A..Z

// 26..35 map to ASCII 0..9

/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */

/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */

// Don't use UCS-2

/** Cached calculation results */

// Handle the basic code points: let `basic` be the number of input code

// points before the last delimiter, or `0` if there is none, then copy

// the first basic code points to the output.

// if it's not a basic code point

// Main decoding loop: start just after the last delimiter if any basic code

// points were copied; start at the beginning otherwise.

// `index` is the index of the next character to be consumed.

// Decode a generalized variable-length integer into `delta`,

// which gets added to `i`. The overflow checking is easier

// if we increase `i` as we go, then subtract off its starting

// value at the end to obtain `delta`.

// `i` was supposed to wrap around from `out` to `0`,

// incrementing `n` each time, so we'll fix that now:

// Insert `n` at position `i` of the output

/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */

/** `inputLength` will hold the number of code points in `input`. */

// Convert the input in UCS-2 to Unicode

// Handle the basic code points

// Cache the length

// Initialize the state

// Main encoding loop:

// `handledCPCount` is the number of code points that have been handled;

// `basicLength` is the number of basic code points.

// Finish the basic string - if it is not empty - with a delimiter

// All non-basic code points < n have been handled already. Find the next

// larger one:

// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,

// but guard against overflow

// Represent delta as a generalized variable-length integer

/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */

/** Define the public API */

/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */

/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */

/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */

/* 536 */

/* 537 */

/* 538 */

// If obj.hasOwnProperty has been overridden, then calling

// obj.hasOwnProperty(prop) will break.

// See: https://github.com/joyent/node/issues/1707

// maxKeys <= 0 means that we should not limit keys count

/* 539 */

/* 540 */

/* 541 */

/* 542 */

// Try to use displayName of wrapped component

// Expose canUseDOM so tests can monkeypatch it

/* 543 */

/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/

/* 544 */

// Test for A's keys different from B.

/* 545 */

// end fast-deep-equal

// fast-deep-equal index.js 2.0.1

// start react-fast-compare

// custom handling for DOM elements

// custom handling for React

// end react-fast-compare

// warn on circular references, don't crash

// browsers give this different errors name and messages:

// chrome/safari: "RangeError", "Maximum call stack size exceeded"

// firefox: "InternalError", too much recursion"

// edge: "Error", "Out of stack space"

// some other error. we should definitely know about these

/* 546 */

// use function arg to avoid need to escape $ characters

// Calculate list of tags, giving priority innermost component (end of the propslist)

// Special rule with link tags, since rel and href are both primary tags, rel takes priority

// Special case for innerHTML which doesn't work lowercased

// Update seen tags with tags from this instance

// Remove a duplicate tag from domTagstoRemove, so it isn't cleared.

/* 547 */

/* 548 */

/* 549 */

/* 550 */

/* 551 */

/* 552 */

/** @license React v16.8.5
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 553 */

// eslint-disable-line no-console

// ArrowDown

// ArrowUp

// valueBeforeUpDown can be null if, for example, user

// hovers on the first suggestion and then pressed Up.

// If that happens, use the original input value.

// Prevents the cursor from moving

// Enter

// See #388

// Escape

// If input.type === 'search', the browser clears the input

// when Escape is pressed. We want to disable this default

// behaviour so that, when suggestions are shown, we just hide

// them, without clearing the input.

// Didn't interact with Up/Down

// Interacted with Up/Down

// This is for testing only. Please show me a better way to emulate this.

// Suggestion was clicked

// Something else inside suggestions container was clicked

// Checking if this.justSelectedSuggestion is already true to not duplicate touch events in chrome

// See: https://github.com/facebook/react/issues/9809#issuecomment-413978405

// shouldResetValueBeforeUpDown

// todo: event.preventDefault when https://github.com/facebook/react/issues/2043

// todo: gets released so onSuggestionMouseDown won't fire in chrome

/* 554 */

/* 555 */

/* 556 */

// `key` is provided by theme()

/* eslint-disable react/jsx-key */

/* eslint-enable react/jsx-key */

// Top of the visible area

// Item is off the top of the visible area

// Item is off the bottom of the visible area

// Used in aria-* attributes. If multiple Autowhatever's are rendered on a page, they must have unique ids.

// Indicates whether a multi section layout should be rendered.

// When specified, it is used to render the input element.

// Renders the items container.

// Array of items or sections to render.

// This function renders a single item.

// Arbitrary data that will be passed to renderItem()

// This function gets a section and renders its title.

// This function gets a section and returns its items, which will be passed into `renderItem` for rendering.

// Arbitrary container props

// Arbitrary input props

// Arbitrary item props

// Section index of the highlighted item

// Highlighted item index (within a section)

// Styles. See: https://github.com/markdalgleish/react-themeable

/* 557 */

/* 558 */

/* 559 */

/* 560 */

/* 561 */

/* 562 */

/* 563 */

/* 564 */

/* 565 */

/* 566 */

// imports

// module

/* 567 */

/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

// get current location

// blank or null?

// send back the fixed css

// strip quotes (if they exist)

// already a full url? no change

//TODO: should we add protocol?

// convert the url to a full url

/* 568 */

/* 569 */

/* 570 */

/* 571 */

/* 572 */

/*!
 * UAParser.js v0.7.18
 * Lightweight JavaScript-based User-Agent string parser
 * https://github.com/faisalman/ua-parser-js
 *
 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
 * Dual licensed under GPLv2 or MIT
 */

/* globals __webpack_amd_options__ */

/* 573 */

/* 574 */

/* 575 */

/* 576 */

/* 577 */

// CONCATENATED MODULE: ./node_modules/redux-thunk/es/index.js

// EXTERNAL MODULE: ./node_modules/redux-logger/dist/redux-logger.js

// CONCATENATED MODULE: ./src/components/core/components/hub.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/makeStyles.js

// Antialiasing.

// Change from `box-sizing: content-box` so that `width`

// is not affected by `padding` or `border`.

// Remove the margin in all browsers.

// Save printer ink.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/CssBaseline/CssBaseline.js

/**
 * Kickstart an elegant, consistent, and simple baseline to build upon.
 */

// Prevent padding issue with the Modal and fixed positioned AppBar.

/* Styles applied to the root element if `position="fixed"`. */

/* Styles applied to the root element if `position="absolute"`. */

/* Styles applied to the root element if `position="sticky"`. */

/* Styles applied to the root element if `position="static"`. */

/* Styles applied to the root element if `position="relative"`. */

/* Styles applied to the root element if `color="default"`. */

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js

/**
 * This component takes a `theme` prop.
 * It makes the `theme` available down the React tree thanks to React context.
 * This component should preferably be used at **the root of your component tree**.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js

// To support composition of theme.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/MuiThemeProvider.js

/**
 * @ignore - do not document.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/ownerDocument.js

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/utils/reactHelpers.js

/**
 * Portals provide a first-class way to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Portal/Portal.js

// #StrictMode ready

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/utils/useEventCallback.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/createClass.js

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 3 modules

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/getScrollbarSize.js

// A change of the browser zoom change the scrollbar size.

// Credit https://github.com/twbs/bootstrap/blob/3ffe3a5d82f6f561b82ff78d82b32a7d14aed558/js/src/modal.js#L512-L519

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/ownerWindow.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/ModalManager.js

// Do we have a vertical scrollbar?

// Use computed style, here to get the real padding to add our scrollbar width.

// .mui-fixed is a global helper.

/**
 * @ignore - do not document.
 *
 * Proper state management for containers and the modals in those containers.
 * Simplified, but inspired by react-overlay's ModalManager class.
 * Used by the Modal to ensure proper styling of containers.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/classCallCheck.js

// this.modals[modalIndex] = modal

// this.contaniners[containerIndex] = {

//   modals: [],

//   container,

//   restore: null,

// If the modal we are adding is already in the DOM.

// If that was the last modal in a container, clean up the container.

// The modal might be closed before it had the chance to be mounted in the DOM.

// In case the modal wasn't in the DOM yet.

// Otherwise make sure the next top modal is visible to a screen reader.

// as soon as a modal is adding its modalRef is undefined. it can't set

// aria-hidden because the dom element doesn't exist either

// when modal was unmounted before modalRef gets null

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/TrapFocus.js

/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */

/*

In the future, we should be able to replace TrapFocus with:
https://github.com/facebook/react/blob/master/packages/react-events/docs/FocusScope.md

```jsx
import FocusScope from 'react-dom/FocusScope';

function TrapFocus(props) {
  const {
    children
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableRestoreFocus = false,
    open,
  } = props;

  if (!open) {
    return children;
  }

  return (
    <FocusScope
      autoFocus={!disableAutoFocus}
      contain={!disableEnforceFocus}
      restoreFocus={!disableRestoreFocus}
    >
      {children}
    </FocusScope>
  );
}
```

*/

// ⚠️ You may rely on React.useMemo as a performance optimization, not as a semantic guarantee.

// https://reactjs.org/docs/hooks-reference.html#usememo

// eslint-disable-line react-hooks/exhaustive-deps

// We might render an empty child.

// 9 = Tab

// We need to ignore the next contain as

// it will try to move the focus back to the rootRef element.

// Make sure the next tab starts from the right place.

// With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area

// e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.

// The whatwg spec defines how the browser should behave but does not explicitly mention any events:

// https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.

// restoreLastFocus()

// In IE 11 it is possible for document.activeElement to be null resulting

// in nodeToRestore.current being null.

// Not all elements in IE 11 have a focus method.

// Once IE 11 support is dropped the focus() call can be unconditional.

// Remove grey highlight

// Disable scroll capabilities.

/* Styles applied to the root element if `invisible={true}`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/SimpleBackdrop.js

// A modal manager used to track and manage the state of open Modals.

// Modals don't open on the server so this won't conflict with concurrent requests.

// Fix a bug on Chrome where the scroll isn't initially 0.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/Modal.js

// The element was already mounted.

/* Styles applied to the root element if the `Modal` has exited. */

// FixMe: Always apply document role. Revisit once React Flare is released

// It's a Transition like component

// We don't take event.defaultPrevented into account:

// event.preventDefault() is meant to stop default behaviours like

// clicking a checkbox to check it, hitting a button to submit a form,

// and hitting left arrow to move the cursor in a text input etc.

// Only special HTML elements have these default behaviors.

// Swallow the event, in case someone is listening for the escape key on the body.

// In the context of a TransitionGroup all enters are really appears

// getSnapshotBeforeUpdate(prevProps) {

//   let nextStatus = null

//   if (prevProps !== this.props) {

//     const { status } = this.state

//     if (this.props.in) {

//       if (status !== ENTERING && status !== ENTERED) {

//         nextStatus = ENTERING

//       }

//     } else {

//       if (status === ENTERING || status === ENTERED) {

//         nextStatus = EXITING

//     }

//   }

//   return { nextStatus }

// TODO: remove fallback for next major

// nextStatus will always be ENTERING or EXITING.

// no enter animation skip right to ENTERED

// if we are mounting and running this it means appear _must_ be set

// no exit animation skip right to EXITED

// This shouldn't be necessary, but there are weird race conditions with

// setState callbacks and unmounting in testing, so always make sure that

// we can cancel any pending setState callbacks after we unmount.

// filter props for Transtition

// allows for nested Transitions

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Fade/Fade.js

// So the animation always start from the start.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/debounce.js

// Corresponds to 10 frames at 60 Hz.

// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.

// eslint-disable-next-line consistent-this

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Slide/Slide.js

// Translate the node so he can't be seen on the screen.

// Later, we gonna translate back the node to his original location

// with `none`.`

// Skip configuration where the position is screen size invariant.

// We need to update the position of the drawer when the direction change and

// when it's hidden.

// No need for transitions when the component is hidden

/**
 * The Slide transition is used by the [Drawer](/components/drawers/) component.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */

// variant === temporary

/* Styles applied to the root element if `variant="permanent or persistent"`. */

/* Styles applied to the `Paper` component. */

// Add iOS momentum scrolling.

// temporary style

// We disable the focus ring for mouse, touch and keyboard users.

// At some point, it would be better to keep it for keyboard users.

// :focus-ring CSS pseudo-class will help.

/* Styles applied to the `Paper` component if `anchor="left"`. */

/* Styles applied to the `Paper` component if `anchor="right"`. */

/* Styles applied to the `Paper` component if `anchor="top"`. */

/* Styles applied to the `Paper` component if `anchor="bottom"`. */

/* Styles applied to the `Paper` component if `anchor="left"` & `variant` is not "temporary". */

/* Styles applied to the `Paper` component if `anchor="top"` & `variant` is not "temporary". */

/* Styles applied to the `Paper` component if `anchor="right"` & `variant` is not "temporary". */

/* Styles applied to the `Paper` component if `anchor="bottom"` & `variant` is not "temporary". */

/* Styles applied to the `Modal` component. */

// Explicitly set the default value to solve a bug on IE 11.

// Reset on touch devices, it doesn't add specificity

/* Styles applied to the root element if `edge="start"`. */

/* Styles applied to the root element if `edge="end"`. */

/* Pseudo-class applied to the root element if `disabled={true}`. */

/* Styles applied to the root element if `size="small"`. */

/* Styles applied to the children container element. */

/**
 * The props of the [Modal](/api/modal/) component are available
 * when `variant="temporary"` is set.
 */

// CONCATENATED MODULE: ./src/components/core/ui/drawer.js

/* Styles applied to the root element if `disableGutters={false}`. */

/* Styles applied to the root element if `variant="regular"`. */

/* Styles applied to the root element if `variant="dense"`. */

// For correct alignment with the text.

/* Styles applied to the badge `span` element. */

// Render the badge on top of potential ripples.

/* Styles applied to the badge `span` element if `invisible={true}`. */

/* Styles applied to the root element if `variant="dot"`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormControl/formControlState.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormControl/FormControlContext.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/TextareaAutosize/TextareaAutosize.js

// Visibility needed to hide the extra text area on iPads

// Remove from the content flow

// Ignore the scrollbar width

// Measure height of a textarea with a single row

// The height of the outer content

// Take the box sizing into account for applying this value as a style.

// Need a large enough different to update the height.

// This prevents infinite rendering loop.

// Need a large enough different to allow scrolling.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/InputBase/utils.js

// Supports determination of isControlled().

// Controlled input accepts its current value as a prop.

// @see https://facebook.github.io/react/docs/forms.html#controlled-components

// @param value

// @returns {boolean} true if string (including '') or number (including zero)

// Determine if field is empty or filled.

// Response determines if label is presented above field or as placeholder.

// @param obj

// @param SSR

// @returns {boolean} False when not present or empty string.

//                    True when any number or string with length.

// Determine if an Input is adorned on start.

// It's corresponding to the left with LTR.

// @returns {boolean} False when no adornments.

//                    True when adorned at the start.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/InputBase/InputBase.js

/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */

// The blur won't fire when the disabled state is set on a focused input.

// We need to book keep the focused state manually.

// Rename ref to inputRef as we don't know the

// provided `inputComponent` structure.

// Perform in the willUpdate

// Fix a bug with IE 11 where the focus/blur events are triggered

// while the input is disabled.

// Mimics the default input display property used by browsers for an input.

// Reset (19px), match the native input line-height

// Prevent padding issue with fullWidth.

/* Styles applied to the root element if the component is a descendant of `FormControl`. */

/* Styles applied to the root element if the component is focused. */

/* Styles applied to the root element if `disabled={true}`. */

/* Styles applied to the root element if `startAdornment` is provided. */

/* Styles applied to the root element if `endAdornment` is provided. */

/* Styles applied to the root element if `error={true}`. */

/* Styles applied to the `input` element if `margin="dense"`. */

/* Styles applied to the root element if `multiline={true}`. */

/* Styles applied to the root element if `fullWidth={true}`. */

/* Styles applied to the `input` element. */

// Reset for Safari

// Make the flex item shrink with Firefox

// Fix IE 11 width issue

// Firefox 19+

// IE 11

// Edge

// Reset Firefox invalid required input style

// Remove the padding when type=search.

// Show and hide the placeholder logic

/* Styles applied to the `input` element if `select={true}`. */

/* Styles applied to the `input` element if `multiline={true}`. */

/* Styles applied to the `input` element if `type="search"`. */

// Improve type search style.

/* Styles applied to the `input` element if `startAdornment` is provided. */

/* Styles applied to the `input` element if `endAdornment` is provided. */

/* Styles applied to the `input` element if `hiddenLabel={true}`. */

/* Styles applied to the root element if `disableUnderline={false}`. */

// Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FilledInput/FilledInput.js

/* Styles applied to the `input` if in `<FormControl hiddenLabel />`. */

// IE 11: fieldset with legend does not render

// a border radius. This maintains consistency

// by always having a legend rendered

// Match the Input Label

/* Styles applied to the legend element. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/OutlinedInput/NotchedOutline.js

/* Styles applied to the `NotchedOutline` element. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormControl/useFormControl.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormLabel/FormLabel.js

/* Pseudo-class applied to the root element if `focused={true}`. */

/* Pseudo-class applied to the root element if `error={true}`. */

/* Pseudo-class applied to the root element if `filled={true}`. */

/* Pseudo-class applied to the root element if `required={true}`. */

/* Styles applied to the asterisk element. */

/* Pseudo-class applied to the asterisk element. */

// slight alteration to spec spacing to match visual spec result

/* Styles applied to the root element if `margin="dense"`. */

// Compensation for the `Input.inputDense` style.

/* Styles applied to the `input` element if `shrink={true}`. */

/* Styles applied to the `input` element if `disableAnimation={false}`. */

/* Styles applied to the root element if `variant="filled"`. */

// Chrome's autofill feature gives the input field a yellow background.

// Since the input field is behind the label in the HTML tree,

// the input field is drawn last and hides the label with an opaque background color.

// zIndex: 1 will raise the label above opaque background-colors of input.

/* Styles applied to the root element if `variant="outlined"`. */

// see comment above on filled.zIndex

// We need to iterate through the children and find the Input in order

// to fully support server-side rendering.

// Reset fieldset default style.

/* Styles applied to the root element if `margin="normal"`. */

/* Styles applied to the root element if `variant="filled"` or `variant="outlined"`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/typeof.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Grow/Grow.js

/**
 * The Grow transition is used by the [Tooltip](/components/tooltips/) and
 * [Popover](/components/popover/) components.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Popover/Popover.js

// Sum the scrollTop between two elements.

// Returns the top/left offset of the position

// to attach to on the anchor element (or body if none is provided)

// If an anchor element wasn't provided, just use the parent body element of this Popover

// != the default value

// Check if the parent has requested anchoring on an inner content node

// Get the offset of of the anchoring element

// Calculate element positioning

// Check if the vertical axis needs shifting

// Check if the horizontal axis needs shifting

// Returns the vertical offset of inner content to anchor the transform on if provided

// Because we debounce the event, the open prop might no longer be true

// when the callback resolves.

// If the container prop is provided, use that

// If the anchorEl prop is provided, use its parent body element as the container

// If neither are provided let the Modal take care of choosing the container

// eslint-disable-next-line react/prop-types

// So we see the popover when it's empty.

// It's most likely on issue on userland.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/MenuList/MenuList.js

// jsdom doesn't support innerText

// Prevent infinite loop.

// Move to the next element.

// Let's ignore that piece of logic if users are already overriding the width

// of the menu.

// Reset

// specZ: The maximum height of a simple menu should be one or more rows less than the view

// height. This ensures a tapable area outside of the simple menu with which to dismiss

// the menu.

/* Styles applied to the `List` component via `MenuList`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Select/SelectInput.js

// Focus the display node so the focus is restored on this element once

// the menu is closed.

// Rerender with the resolve `displayRef` reference.

// No need to display any value if the field is empty.

// The value is most likely not a valid HTML attribute.

// Avoid performing a layout computation in the render method.

// TODO v5: merge root and select

// The native select doesn't respond to enter on MacOS, but it's recommended by

// https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html

// Opening the menu is going to blur the. It will be focused back when closed.

// The parent components are relying on the bubbling of the event.

// eslint-disable-next-line react/no-danger

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/internal/svg-icons/ArrowDropDown.js

/* Styles applied to the select component `root` class. */

/* Styles applied to the select component `select` class. */

// When interacting quickly, the text can end up selected.

// Native select can't be selected either.

// So it doesn't collapse.

// Show that it's not an text input

// Remove IE 11 arrow

/* Styles applied to the select component if `variant="filled"`. */

/* Styles applied to the select component if `variant="outlined"`. */

/* Styles applied to the select component `selectMenu` class. */

/* Pseudo-class applied to the select component `disabled` class. */

/* Styles applied to the select component `icon` class. */

// We use a position absolute over a flexbox in order to forward the pointer events

// to the input.

// Center vertically

// Most of the logic is implemented in `NativeSelectInput`.

// The `Select` component is a simple API wrapper to expose something better to play with.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/NativeSelect/NativeSelectInput.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Select/Select.js

// Most of the logic is implemented in `SelectInput`.

// We render a select. We can ignore the type provided by the `Input`.

/* Styles applied to the root element if `selected={true}`. */

/* Styles applied to the root element if dense. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/TextField/TextField.js

// CONCATENATED MODULE: ./src/components/core/ui/search.js

//console.log(method);

//console.log(newValue, this.state.single);

// CONCATENATED MODULE: ./src/components/core/ui/toolbar.js

// CONCATENATED MODULE: ./src/components/core/ui/app.js

/*
{enable: true, url: 'https://plus.google.com/112618720945759819017', icon: 'google-plus', color: '#d34836'},
{enable: true, url: 'https://twitter.com/jmarroyave', icon: 'twitter', color: '#00aced'},
*/

// CONCATENATED MODULE: ./src/components/shared/globals/footer_links/index.js

// CONCATENATED MODULE: ./src/components/shared/globals/footer_links/footer_links.js

// EXTERNAL MODULE: ./src/components/shared/globals/social_networks/social_networks.scss

// CONCATENATED MODULE: ./src/components/shared/globals/social_networks/index.js

// CONCATENATED MODULE: ./src/components/shared/globals/social_networks/social_networks.js

// CONCATENATED MODULE: ./src/components/shared/globals/version/version.js

// CONCATENATED MODULE: ./src/components/shared/globals/version/index.js

// EXTERNAL MODULE: ./src/components/core/ui/layout/proxy.js + 5 modules

// CONCATENATED MODULE: ./src/components/shared/globals/footer/footer.js

// CONCATENATED MODULE: ./src/components/shared/globals/footer/index.js

// CONCATENATED MODULE: ./src/components/app/footer/index.js

// CONCATENATED MODULE: ./src/components/app/footer/footer.js

// CONCATENATED MODULE: ./src/components/app/header/header.js

// CONCATENATED MODULE: ./src/state/contexts/app.js

// CONCATENATED MODULE: ./src/components/app/app.js

// CONCATENATED MODULE: ./src/components/app/index.js

// EXTERNAL MODULE: ./node_modules/react-loadable/lib/index.js

// CONCATENATED MODULE: ./src/pages/home.js

/* import() */

/*require.resolve*/

// CONCATENATED MODULE: ./src/config/navigation.js

// EXTERNAL MODULE: ./src/index.scss

// CONCATENATED MODULE: ./src/index.js

/* 578 */

/* 579 */

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 3 modules

/**
 * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).
 *
 * This component can be useful in a variety of situations:
 * - Escape hatch for broken dependencies not supporting SSR.
 * - Improve the time-to-first paint on the client by only rendering above the fold.
 * - Reduce the rendering time on the server.
 * - Under too heavy server load, you can turn on service degradation.
 */

// We need the Fragment here to force react-docgen to recognise NoSsr as a component.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/focusVisible.js

// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js

/**
 * If at any point a user clicks with a pointing device, ensure that we change
 * the modality away from keyboard.
 * This avoids the situation where a user presses a key on an already focused
 * element, and then clicks on a different element, focusing it with a
 * pointing device, while we still think we're in keyboard modality.
 * @param {Event} e
 */

// browsers not implementing :focus-visible will throw a SyntaxError

// we use our own heuristic for those browsers

// rethrow might be better if it's not the expected error but do we really

// want to crash if focus-visible malfunctioned?

// no need for validFocusTarget check. the user does that by attaching it to

// focusable events only

/**
 * Should be called if a blur event is fired on a focus-visible element
 */

// To detect a tab/window switch, we look for a blur event followed

// rapidly by a visibility change.

// If we don't see a visibility change within 100ms, it's probably a

// regular focus change.

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/react-transition-group/esm/TransitionGroupContext.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/react-transition-group/esm/utils/ChildMapping.js

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */

// run the map function here instead so that the key is the computed one

/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */

// For each key of `next`, the list of keys to insert before that key in

// the combined list

// Finally, add the keys which didn't appear before any key in `next`

// item is new (entering)

// item hasn't changed transition states

// copy over the last transition props;

// console.log('unchanged', key)

// item is old (exiting)

// console.log('leaving', key)

// console.log('entering', key)

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/react-transition-group/esm/TransitionGroup.js

// Initial children should all be entering, dependent on appear

/**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/ButtonBase/Ripple.js

// Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority

// react-transition-group#onExit

// react-transition-group#onExited

// Used to filter out mouse emulated events on mobile.

// We use a timer in order to only show the ripples for touch "click" like events.

// We don't want to display the ripple for touch scroll events.

// For some reason the animation is broken on Mobile Chrome if the size if even.

// Touche devices

// Prepare the ripple effect.

// Delay the execution of the ripple effect.

// The touch interaction occurs too quickly.

// We still want to show ripple effect.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/ButtonBase/TouchRipple.js

/* Styles applied to the internal `Ripple` components `ripple` class. */

/* Styles applied to the internal `Ripple` components `rippleVisible` class. */

/* Styles applied to the internal `Ripple` components `ripplePulsate` class. */

/* Styles applied to the internal `Ripple` components `child` class. */

/* Styles applied to the internal `Ripple` components `childLeaving` class. */

/* Styles applied to the internal `Ripple` components `childPulsate` class. */

// Fix for https://github.com/facebook/react/issues/7769

// Check if key is already down to avoid repeats being counted as multiple activations

// Keyboard accessibility for non interactive elements

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/ButtonBase/ButtonBase.js

// Reset default value

// Remove the margin in Safari

// Remove the padding in Firefox

// So we take precedent over the style of a native <a /> element.

// Disable link interactions

/* Pseudo-class applied to the root element if keyboard focused. */

/* 580 */

/* 581 */

/* 582 */

/* 583 */

/* 584 */

/* 585 */

/* 586 */

/* 587 */

/* 588 */

/* 589 */

/* 590 */

/* 591 */

/* 592 */

/* 593 */

/* 594 */

/* 595 */

/* 596 */

/* 597 */

/* 598 */

/* 599 */

/* 600 */

/* 601 */

/* 602 */

/* 603 */

/* 604 */

/* 605 */

/* 606 */

/* 607 */

/* 608 */

/* 609 */

/* 610 */

/* 611 */

/* 612 */

/* 613 */

/* 614 */

/* 615 */

/* 616 */

/* 617 */

/* 618 */

/* 619 */

/* 620 */

/* 621 */

/* 622 */

/* 623 */

/* 624 */

/* 625 */

/* 626 */

/* eslint-disable no-restricted-syntax */

// Resolve default props, code borrow from React source.

// https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221

/* 627 */

/* Styles applied to the root element if `square={false}`. */

/* 628 */

/* Styles applied to the root element if `disablePadding={false}`. */

/* Styles applied to the root element if a `subheader` is provided. */

/* 629 */

/* Styles applied to the inner `component` element if `disableGutters={false}`. */

/* Styles applied to the root element if `inset={true}`. */

/* Styles applied to the root element if `disableSticky={false}`. */

/* 630 */

// Use div by default.

// Avoid nesting of li > li.

/* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */

/* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */

/* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */

/* Styles applied to the `component` element if dense. */

/* Styles applied to the `component` element if `alignItems="flex-start"`. */

/* Pseudo-class applied to the inner `component` element if `disabled={true}`. */

/* Styles applied to the inner `component` element if `divider={true}`. */

/* Styles applied to the inner `component` element if `button={true}`. */

/* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */

// Add some space to avoid collision as `ListItemSecondaryAction`

// is absolutely positioned.

/* Pseudo-class applied to the root element if `selected={true}`. */

/* 631 */

/* Styles applied to the `Typography` components if primary and secondary are set. */

/* Styles applied to the `Typography` components if dense. */

/* Styles applied to the primary `Typography` component. */

/* Styles applied to the secondary `Typography` component. */

/* 632 */

// EXTERNAL MODULE: ./node_modules/@material-ui/styles/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js + 1 modules

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

/**
 * Create a rule instance.
 */

// It is an at-rule and it has no instance.

/**
 * Converts array values to string.
 *
 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
 * `border: ['1px', '2px']` > `border: 1px, 2px;`
 * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
 * `color: ['red', !important]` > `color: red !important;`
 */

// Support space separated values via `[['5px', '10px']]`.

// Add !important, because it was ignored.

/**
 * Indent a string.
 * http://jsperf.com/array-join-vs-for
 */

/**
 * Converts a Rule to CSS string.
 */

// Apply fallbacks first.

// Array syntax {fallbacks: [{prop: value}]}

// Object syntax {fallbacks: {prop: value}}

// Allow empty style in this case, because properties will be added dynamically.

// When rule is being stringified before selector was defined.

/**
   * Get or set a style property.
   */

// It's a getter.

// Don't do anything if the value has not changed.

// Value is empty and wasn't defined before.

// We are going to remove this value.

// Renderable is defined if StyleSheet option `link` is true.

/**
   * Set selector string.
   * Attention: use this with caution. Most browsers didn't implement
   * selectorText setter, so this may result in rerendering of entire Style Sheet.
   */

/**
   * Apply rule to an element inline.
   */

/**
   * Returns JSON representation of the rule.
   * Fallbacks are not supported.
   * Useful for inline styles.
   */

/**
   * Generates a CSS string.
   */

// If selector setter is not implemented, rerender the rule.

/**
     * Get selector string.
     */

/**
   * Get a rule.
   */

/**
   * Get index of a rule.
   */

/**
   * Create and register rule, run plugins.
   */

// Animation name ref replacer.

// eslint-disable-next-line no-unused-vars

/**
   * Contains rules objects and allows adding/removing etc.
   * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
   */

// Rules registry for access by .get() method.

// It contains the same rule registered by name and by selector.

// Original styles object.

// Used to ensure correct rules order.

/**
   * Create and register rule.
   *
   * Will not render after Style Sheet was rendered the first time.
   */

// We need to save the original decl before creating the rule

// because cache plugin needs to use it as a key to return a cached rule.

// For e.g. rules inside of @media container

/**
   * Delete a rule.
   */

/**
   * Run `onProcessRule()` plugins on every rule.
   */

// We need to clone array because if we modify the index somewhere else during a loop

// we end up with very hard-to-track-down side effects.

/**
   * Register a rule in `.map` and `.classes` maps.
   */

/**
   * Unregister a rule.
   */

/**
   * Update the function values with a new data.
   */

// $FlowFixMe

/**
   * Execute plugins, update rule props.
   */

// It is a rules container like for e.g. ConditionalRule.

// We rely on a new `style` ref in case it was mutated during onUpdate hook.

// Update and add props.

// We need to run the plugins in case new `style` relies on syntax plugins.

// We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.

// We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

// Remove props.

/**
   * Convert rules to a CSS string.
   */

// No need to render an empty rule.

/**
   * Attach renderable to the render tree.
   */

// Order is important, because we can't use insertRule API if style element is not attached.

/**
   * Remove renderable from render tree.
   */

/**
   * Add a rule to the current stylesheet.
   * Will insert a rule also after the stylesheet has been rendered first time.
   */

// Plugins can create rules.

// In order to preserve the right order, we need to queue all `.addRule` calls,

// which happen after the first `rules.add()` call.

// Don't insert rule directly if there is no stringified version yet.

// It will be inserted all together when .attach is called.

// We can't add rules to a detached style node.

// We will redeploy the sheet once user will attach it.

/**
   * Insert rule into the StyleSheet
   */

/**
   * Create and add rules.
   * Will render also after Style Sheet was rendered the first time.
   */

/**
   * Get a rule by name.
   */

/**
   * Delete a rule by name.
   * Returns `true`: if rule has been deleted from the DOM.
   */

/**
   * Deploy pure CSS string to a renderable.
   */

/**
   * Call `onCreateRule` hooks and return an object if returned by a hook.
   */

/**
   * Call `onProcessRule` hooks.
   */

/**
   * Call `onProcessStyle` hooks.
   */

/**
   * Call `onProcessSheet` hooks.
   */

/**
   * Call `onUpdate` hooks.
   */

/**
   * Call `onChangeValue` hooks.
   */

/**
   * Register a plugin.
   */

// Avoids applying same plugin twice, at least based on ref.

/**
   * Register a Style Sheet.
   */

// Find a position.

/**
   * Reset the registry.
   */

/**
   * Remove a Style Sheet.
   */

/**
   * Convert all attached sheets to a CSS string.
   */

/**
     * Current highest index number.
     */

// Bundle may contain multiple JSS versions at the same time. In order to identify

// the current version with just one short number and use it for classes generation

// we use a counter. Also it is more accurate, because user can manually reevaluate

// the module.

/**
 * Get a style property value.
 */

// Support CSSTOM.

// IE may throw if property is unknown.

/**
 * Set a style property.
 */

/**
 * Remove a style property.
 */

/**
 * Set the selector.
 */

// Return false if setter was not successful.

// Currently works in chrome only.

/**
 * Gets the `head` element upon the first call and caches it.
 * We assume it can't be null.
 */

/**
 * Find attached sheet with an index higher than the passed one.
 */

/**
 * Find a node before which we can insert the sheet.
 */

// Try to insert before the next higher sheet.

/**
 * Find attached sheet with the highest index.
 */

// Otherwise insert after the last attached.

/**
 * Find a comment with "jss" inside.
 */

// Try to find a comment placeholder if registry is empty.

// If user specifies an insertion point and it can't be found in the document -

// bad specificity issues may appear.

/**
 * Insert style element into the DOM.
 */

/**
 * Read jss nonce setting from the page if the user has set it.
 */

// In case previous insertion fails, passed index might be wrong

// Without it, IE will have a broken source order specificity if we

// insert rules after we insert the style tag.

// It seems to kick-off the source order specificity algorithm.

// HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696

// There is no sheet when the renderer is used from a standalone StyleRule.

/**
   * Insert style element into render tree.
   */

// In the case the element node is external and it is already in the DOM.

// Works with iframes and any node types.

// https://stackoverflow.com/questions/41328728/force-casting-in-flow

// When rules are inserted using `insertRule` API, after `sheet.detach().attach()`

// browsers remove those rules.

// TODO figure out if its a bug and if it is known.

// Workaround is to redeploy the sheet.

/**
   * Remove style element from render tree.
   */

/**
   * Inject CSS string into element.
   */

/**
   * Insert RuleList into an element.
   */

/**
   * Insert a rule into element.
   */

// We need to render the container without children first.

/**
   * Get index of a CSS Rule.
   */

/**
   * Generate a new CSS rule and replace the existing one.
   *
   * Only used for some old browsers because they can't set a selector.
   */

/**
   * Get all rules elements.
   */

/**
   * Prepares various options, applies plugins.
   * Should not be used twice on the same instance, because there is no plugins
   * deduplication logic.
   */

// eslint-disable-next-line prefer-spread

/**
   * Create a Style Sheet.
   */

/**
   * Detach the Style Sheet and remove it from the registry.
   */

/**
   * Create a rule without a Style Sheet.
   */

// Enable rule without name for inline styles.

/**
   * Register plugin. Passed function will be invoked with a rule instance.
   */

/**
 * SheetsManager is like a WeakMap which is designed to count StyleSheet
 * instances and attach/detach automatically.
 */

/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */

/**
 * Export a constant indicating if this browser has CSSTOM support.
 * https://developers.google.com/web/updates/2018/03/cssom
 */

// CONCATENATED MODULE: ./node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.esm.js

// We need to extract function values from the declaration, so that we can keep core unaware of them.

// We need to do that only once.

// We don't need to extract functions on each style update, since this can happen only once.

// We don't support function values inside of function rules.

// If we have a style function, the entire rule is dynamic and style object

// will be returned from that function.

// Empty object will remove all currently defined props

// in case function rule returns a falsy value.

// If we have a fn values map, it is a rule with function values.

// CONCATENATED MODULE: ./node_modules/jss-plugin-global/dist/jss-plugin-global.esm.js

/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */

// CONCATENATED MODULE: ./node_modules/jss-plugin-nested/dist/jss-plugin-nested.esm.js

// Get a function to be used for $ref replacement.

// Replace all & by the parent or prefix & with the parent.

// Options has been already created, now we only increase index.

// Lazily create the ref replacer function just once for

// all nested rules within the sheet.

// Replace all $refs.

// Place conditional right after the parent rule to ensure right ordering.

// CONCATENATED MODULE: ./node_modules/hyphenate-style-name/index.js

/* eslint-disable no-var, prefer-template */

// CONCATENATED MODULE: ./node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.esm.js

/**
 * Convert camel cased property names to dash separated.
 *
 * @param {Object} style
 * @return {Object}
 */

/**
 * Allow camel cased property names by converting them back to dasherized.
 *
 * @param {Rule} rule
 */

// Handle rules like @font-face, which can have multiple styles in an array

// There was no camel case in place

// CONCATENATED MODULE: ./node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.esm.js

/**
 * Clones the object and adds a camel cased property version.
 */

// Animation properties

// Background properties

// Border Properties

// Margin properties

// Padding properties

// Mask properties

// Width and height properties

// Position properties

// Shadow properties

// Column properties

// Font and text properties

// Motion properties

// Outline properties

// Perspective properties

// Transform properties

// Transition properties

// Alignment properties

// Some random properties

// Grid properties

// Not existing properties.

// Used to avoid issues with jss-plugin-expand integration.

/**
 * Recursive deep style passing function
 */

/**
 * Add unit to numeric values.
 */

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js

// CONCATENATED MODULE: ./node_modules/css-vendor/dist/css-vendor.esm.js

// Export javascript style and css style vendor prefixes.

// We should not do anything if required serverside.

// Order matters. We need to check Webkit the last one because

// other vendors use to add Webkit prefixes to some properties

// Correctly detect the Edge browser.

// Correctly detect the Safari browser.

/**
 * Vendor prefix string for the current browser.
 *
 * @type {{js: String, css: String, vendor: String, browser: String}}
 * @api public
 */

/**
 * Test if a keyframe at-rule should be prefixed or not
 *
 * @param {String} vendor prefix string for the current browser.
 * @return {String}
 * @api public
 */

// https://caniuse.com/#search=appearance

/**
 * Replaces the letter with the capital letter
 *
 * @param {String} match
 * @param {String} c
 * @return {String}
 * @api private
 */

/**
 * Convert dash separated strings to camel-cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

/**
 * Convert dash separated strings to pascal cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

// https://caniuse.com/#search=multicolumn

// https://github.com/postcss/autoprefixer/issues/491

// https://github.com/postcss/autoprefixer/issues/177

// Return custom CSS variable without prefixing.

// Return already prefixed value without prefixing.

// Try webkit fallback.

// https://caniuse.com/#search=color-adjust

// We test every property on vendor prefix requirement.

// Once tested, result is cached. It gives us up to 70% perf boost.

// http://jsperf.com/element-style-object-access-vs-plain-object

// Prefill cache with known css properties to reduce amount of

// properties we need to feature test at runtime.

// http://davidwalsh.name/vendor-prefix

// eslint-disable-next-line no-restricted-globals

// Properties that cannot be correctly detected using the

// cache prefill method.

/**
 * Test if a property is supported, returns supported property with vendor
 * prefix if required. Returns `false` if not supported.
 *
 * @param {String} prop dash separated
 * @param {Object} [options]
 * @return {String|Boolean}
 * @api public
 */

// For server-side rendering.

// Remove cache for benchmark tests or return property from the cache.

// Check if 'transition' or 'transform' natively supported in browser.

// Find a plugin for current prefix property.

// Reset styles for current property.

// Firefox can even throw an error for invalid properties, e.g., "0".

/**
 * Returns prefixed value transition/transform if needed.
 *
 * @param {String} match
 * @param {String} p1
 * @param {String} p2
 * @return {String}
 * @api private
 */

/**
 * Returns prefixed value if needed. Returns `false` if value is not supported.
 *
 * @param {String} property
 * @param {String} value
 * @return {String|Boolean}
 * @api public
 */

// It is a string or a number as a string like '1'.

// We want only prefixable values here.

// Create cache key for current value.

// Remove cache for benchmark tests or return value from cache.

// IE can even throw an error in some cases, for e.g. style.content = 'bar'.

// Test value as it is.

// Return false if value not supported.

// If 'transition' or 'transition-property' property.

// Value with a vendor prefix.

// Hardcode test to convert "flex" to "-ms-flexbox" for IE10.

// Test prefixed value.

// Write current value to cache.

// CONCATENATED MODULE: ./node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.esm.js

/**
 * Add vendor prefix to a property name when needed.
 *
 * @api public
 */

// Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'

// No need to prefix IE/Edge. Older browsers will ignore unsupported rules.

// https://caniuse.com/#search=keyframes

// CONCATENATED MODULE: ./node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.esm.js

/**
 * Sort props by length.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/jssPreset/jssPreset.js

// Subset of jss-preset-default with only the plugins the Material-UI components are using.

// Disable the vendor prefixer server-side, it does nothing.

// This way, we can get a performance boost.

// In the documentation, we are using `autoprefixer` to solve this problem.

// Returns a function which generates unique class names based on counters.

// When new generator function is created, rule counter is reset.

// We need to reset the rule counter for SSR for each request.

// It's inspired by

// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js

// Is a global static MUI style?

// We can use a shorthand class name, we never use the keys to style the components.

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/StylesProvider/StylesProvider.js

// Default JSS instance.

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/makeStyles/indexCounter.js

/* eslint-disable import/prefer-default-export */

// Global index counter to preserve source order.

// We create the style sheet during at the creation of the component,

// children are handled after the parents, so the order of style elements would be parent->child.

// It is a problem though when a parent passes a className

// which needs to override any child's styles.

// StyleSheet of the child has a higher specificity, because of the source order.

// So our solution is to render sheets them in the reverse order child->sheet, so

// that parent has a higher specificity.

// EXTERNAL MODULE: ./node_modules/deepmerge/dist/cjs.js

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/getStylesCreator/getStylesCreator.js

// Support for the jss-expand plugin.

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/getStylesCreator/noopTheme.js

// We use the same empty object to ref count the styles that don't need a theme object.

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/makeStyles/makeStyles.js

// Cache for the finalized classes value.

// Cache for the last used classes prop pointer.

// Cache for the last used rendered classes pointer.

// Tracks if either the rendered classes or classes prop has changed,

// requiring the generation of a new finalized classes object.

/**
 * Extracts a styles object with only props that contain function values.
 */

// "the first render", or "memo dropped the value"
