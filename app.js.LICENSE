/******/

// webpackBootstrap

// install a JSONP callback for chunk loading

// The module cache

// object to store loaded and loading chunks

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// Promise = chunk loading, 0 = chunk loaded

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// This file contains only the entry chunk.

// The chunk loading function for additional chunks

// JSONP chunk loading for javascript

// 0 means "already installed".

// a Promise means "currently loading".

// setup Promise in chunk cache

// start chunk loading

// script path function

// create error before stack unwound to get useful stacktrace later

// avoid mem leaks in IE.

// expose the modules object (__webpack_modules__)

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

// on error function for async loading

// Load entry module and return exports

/************************************************************************/

/* 0 */

/***/

/* 1 */

/* harmony export (binding) */

/* 2 */

/* 3 */

// By explicitly using `prop-types` you are opting into new production behavior.

// http://fb.me/prop-types-in-prod

/* 4 */

/* harmony import */

/* 5 */

/* harmony default export */

/* 6 */

/* 7 */

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/extends.js

/*#__PURE__*/

// name and withTheme are invariant in the outer scope

// eslint-disable-next-line react-hooks/rules-of-hooks

// Provide the theme to the wrapped component.

// So we don't have to use the `withTheme()` Higher-order Component.

// EXTERNAL MODULE: ./node_modules/@material-ui/styles/node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/withStyles.js

/* 8 */

/* 9 */

// TODO: Make it private only in v5

/**
   * This will create a new function if the ref props change and are defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior
   */

/* 10 */

/* 11 */

/* 12 */

// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.

//

// A strict capitalization should uppercase the first letter of each word a the sentence.

// We only handle the first word.

/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} functions to chain
 * @returns {function|null}
 */

/* 13 */

/* 14 */

/* 15 */

/* 16 */

// DCE check should happen before ReactDOM bundle executes so that

// DevTools can report bad minification during injection.

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

// Verify that the code above has been dead code eliminated (DCE'd).

// DevTools shouldn't crash React, no matter what.

// We should still report in case we break this code.

/* 17 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/slicedToArray.js

/* 18 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

/* 19 */

/* 20 */

/* 21 */

/* 22 */

/* 23 */

/* 24 */

// Keep in mind that @media is inclusive by the CSS specification.

/* 25 */

/* 26 */

/* 27 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

// we don't care about invariant's own frame

/* 28 */

/* 29 */

/* 30 */

/* 31 */

// CONCATENATED MODULE: ./src/jmarroyave/conf/values/default.js

// CONCATENATED MODULE: ./src/jmarroyave/conf/versions.js

// CONCATENATED MODULE: ./src/jmarroyave/conf/constants.js

/* 32 */

/* 33 */

/* 34 */

/* 35 */

/* 36 */

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */

// Don't bother if no value provided

// Force an array if not already something iterable

/*eslint no-param-reassign:0*/

// Iterate over array values

// Iterate over object keys

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */

/* 37 */

/* 38 */

/* 39 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

// EXTERNAL MODULE: ./node_modules/react-router-dom/node_modules/warning/browser.js

/**
 * The public API for putting history on context.
 */

// Do this here so we can setState when a <Redirect> changes the

// location in componentWillMount. This happens e.g. when doing

// server rendering using a <StaticRouter>.

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Router.js

// Written in this round about way for babel-transform-imports

/**
 * The public API for a <Router> that uses HTML5 history.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/BrowserRouter.js

// EXTERNAL MODULE: ./node_modules/react-router-dom/node_modules/history/createHashHistory.js

/**
 * The public API for a <Router> that uses window.location.hash.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/HashRouter.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Link.js

// onClick prevented default

// ignore right clicks

// let browser handle "target=_blank" etc.

// eslint-disable-line no-unused-vars

/**
 * The public API for rendering a history-aware <a>.
 */

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// Two-arg form: push(path, state)

// One-arg form: push(location)

// Resolve incomplete/relative pathname relative to current location.

// When there is no prior location and pathname is empty, set it to /

// TODO: If another transition starts while we're still confirming

// the previous one, we may end up in a weird state. Figure out the

// best way to handle this.

// Return false from a transition hook to cancel the transition.

/**
 * Creates a history object that stores locations in memory.
 */

/**
 * The public API for a <Router> that stores location in memory.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/react-router/es/MemoryRouter.js

// Mimic the behavior of DOM histories by

// causing a render after a cancelled POP.

// the path pattern used to match

// the matched portion of the URL

// whether or not we matched exactly

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/MemoryRouter.js

// <Switch> already computed the match for us

/**
 * The public API for matching a single path and rendering.
 */

// private, from <Switch>

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Route.js

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

/**
 * The public API for prompting the user before navigating away
 * from a screen with a component.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/react-router/es/Prompt.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Prompt.js

/**
 * The public API for updating the location programmatically
 * with a component.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Redirect.js

/**
 * The public API for rendering the first <Route> that matches.
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/react-router/es/Switch.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/Switch.js

/**
 * A public higher-order component to access the imperative API
 */

// CONCATENATED MODULE: ./node_modules/react-router-dom/es/index.js

/* concated harmony reexport BrowserRouter */

/* unused concated harmony import HashRouter */

/* concated harmony reexport Link */

/* unused concated harmony import MemoryRouter */

/* unused concated harmony import NavLink */

/* unused concated harmony import Prompt */

/* unused concated harmony import Redirect */

/* concated harmony reexport Route */

/* unused concated harmony import Router */

/* unused concated harmony import StaticRouter */

/* concated harmony reexport Switch */

/* unused concated harmony import matchPath */

/* concated harmony reexport withRouter */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

/* 48 */

/* 49 */

/* unused harmony export easing */

/* unused harmony export formatMs */

/* unused harmony export isString */

/* unused harmony export isNumber */

// This is the most common easing curve.

// Objects enter the screen at full velocity from off-screen and

// slowly decelerate to a resting point.

// Objects leave the screen at full velocity. They do not decelerate when off-screen.

// The sharp curve is used by objects that may return to the screen at any time.

// most basic recommended timing

// this is to be used in complex animations

// recommended when something is entering screen

// recommended when something is leaving screen

/**
 * @param {string|Array} props
 * @param {object} param
 * @param {string} param.prop
 * @param {number} param.duration
 * @param {string} param.easing
 * @param {number} param.delay
 */

// https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

/* 50 */

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/**
 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
 *
 * @param {function} fn
 */

/* 55 */

/* 56 */

/* 57 */

/* 58 */

//console.debug(error);

/* 59 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 60 */

/* 61 */

/* 62 */

/* 63 */

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25

/* 64 */

/* 65 */

/* 66 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/iterableToArray.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js

/* 67 */

/* unused harmony export hexToRgb */

/* unused harmony export rgbToHex */

/* unused harmony export hslToRgb */

/* unused harmony export decomposeColor */

/* unused harmony export recomposeColor */

/* unused harmony export getLuminance */

/* unused harmony export emphasize */

/* eslint-disable no-use-before-define */

/**
 * Returns a number whose value is limited to the given range.
 *
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */

/**
 * Converts a color from CSS hex format to CSS rgb format.
 *
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */

/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */

// Idempotent

/**
 * Converts a color object with type and values to a string.
 *
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */

// Only convert the first 3 values to int (i.e. not alpha)

/**
 * Calculates the contrast ratio between two colors.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} A contrast ratio value in the range 0 - 21.
 */

/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} The relative brightness of the color in the range 0 - 1
 */

/**
 * Converts a color from hsl format to rgb format.
 *
 * @param {string} color - HSL color values
 * @returns {string} rgb color values
 */

// Truncate at 3 digits

// normalized

/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/**
 * Set the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} value - value to set the alpha channel to in the range 0 -1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/**
 * Darkens a color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/**
 * Lightens a color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */

/* 68 */

/* 69 */

/* 70 */

/* 71 */

/* 72 */

/* 73 */

/* 74 */

/* 75 */

/* 76 */

/* 77 */

/* 78 */

/* 79 */

/* 80 */

/* 81 */

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js

/* 82 */

/* 83 */

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

// css base code, injected by the css-loader

// return the list of modules as css string

// Adapted from convert-source-map (MIT)

// import a list of modules into the list

// skip already imported module

// this implementation is not 100% perfect for weird media query combinations

//  when a module is imported multiple times with different media queries.

//  I hope this will never occur (Hey this way we have smaller bundles)

/* 84 */

// Test for IE <= 9 as proposed by Browserhacks

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// Tests for existence of standard globals is to allow style-loader

// to operate correctly into non-standard environments

// @see https://github.com/webpack-contrib/style-loader/issues/177

// If passing function in options, then use it for resolve "head" element.

// Useful for Shadow Root style i.e

// {

//   insertInto: function () { return document.querySelector("#foo").shadowRoot }

// }

// Special case to return head of iframe instead of iframe itself

// This will throw an exception if access to iframe is blocked

// due to cross-origin restrictions

// If a transform function was defined, run it on the css

// If the transform function returns a falsy value, don't add this css.

// This allows conditional loading of css

// noop

// If transform returns a value, use that instead of the original css.

// This allows running runtime transformations on the css.

// http://stackoverflow.com/a/26603875

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// tags it will allow on a page

// By default, add <style> tags to the <head> element

// By default, add <style> tags to the bottom of the target

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

/**
 * Baobab Type Checking
 * =====================
 *
 * Helpers functions used throughout the library to perform some type
 * tests at runtime.
 *
 */

/**
 * Helpers
 * --------
 */

/**
 * Checking whether the given variable is of any of the given types.
 *
 * @todo   Optimize this function by dropping `some`.
 *
 * @param  {mixed} target  - Variable to test.
 * @param  {array} allowed - Array of allowed types.
 * @return {boolean}
 */

/**
 * Simple types
 * -------------
 */

/**
 * Checking whether the given variable is an array.
 *
 * @param  {mixed} target - Variable to test.
 * @return {boolean}
 */

/**
 * Checking whether the given variable is an object.
 *
 * @param  {mixed} target - Variable to test.
 * @return {boolean}
 */

/**
 * Checking whether the given variable is a string.
 *
 * @param  {mixed} target - Variable to test.
 * @return {boolean}
 */

/**
 * Checking whether the given variable is a number.
 *
 * @param  {mixed} target - Variable to test.
 * @return {boolean}
 */

/**
 * Checking whether the given variable is a function.
 *
 * @param  {mixed} target - Variable to test.
 * @return {boolean}
 */

/**
 * Checking whether the given variable is a JavaScript primitive.
 *
 * @param  {mixed} target - Variable to test.
 * @return {boolean}
 */

/**
 * Complex types
 * --------------
 */

/**
 * Checking whether the given variable is a valid splicer.
 *
 * @param  {mixed} target    - Variable to test.
 * @param  {array} [allowed] - Optional valid types in path.
 * @return {boolean}
 */

/**
 * Checking whether the given variable is a valid cursor path.
 *
 * @param  {mixed} target    - Variable to test.
 * @param  {array} [allowed] - Optional valid types in path.
 * @return {boolean}
 */

// Order is important for performance reasons

/**
 * Checking whether the given path is a dynamic one.
 *
 * @param  {mixed} path - The path to test.
 * @return {boolean}
 */

/**
 * Retrieve any monkey subpath in the given path or null if the path never comes
 * across computed data.
 *
 * @param  {mixed} data - The data to test.
 * @param  {array} path - The path to test.
 * @return {boolean}
 */

/**
 * Check if the given object property is a lazy getter used by a monkey.
 *
 * @param  {mixed}   o           - The target object.
 * @param  {string}  propertyKey - The property to test.
 * @return {boolean}
 */

/**
 * Returns the type of the given monkey definition or `null` if invalid.
 *
 * @param  {mixed} definition - The definition to check.
 * @return {string|null}
 */

/**
 * Checking whether the given watcher definition is valid.
 *
 * @param  {mixed}   definition - The definition to check.
 * @return {boolean}
 */

/**
 * Checking whether the given string is a valid operation type.
 *
 * @param  {mixed} string - The string to test.
 * @return {boolean}
 */

// Ordered by likeliness

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

/* 95 */

/* 96 */

/* 97 */

/* 98 */

/* 99 */

/* WEBPACK VAR INJECTION */

/* eslint eqeqeq: 0 */

/**
 * Baobab Helpers
 * ===============
 *
 * Miscellaneous helper functions.
 */

/**
 * Function decorating one function with another that will be called before the
 * decorated one.
 *
 * @param  {function} decorator - The decorating function.
 * @param  {function} fn        - The function to decorate.
 * @return {function}           - The decorated function.
 */

/**
 * Function cloning the given regular expression. Supports `y` and `u` flags
 * already.
 *
 * @param  {RegExp} re - The target regular expression.
 * @return {RegExp}    - The cloned regular expression.
 */

/**
 * Coerce the given variable into a full-fledged path.
 *
 * @param  {mixed} target - The variable to coerce.
 * @return {array}        - The array path.
 */

/**
 * Function comparing an object's properties to a given descriptive
 * object.
 *
 * @param  {object} object      - The object to compare.
 * @param  {object} description - The description's mapping.
 * @return {boolean}            - Whether the object matches the description.
 */

/**
 * Little helper returning a JavaScript error carrying some data with it.
 *
 * @param  {string} message - The error message.
 * @param  {object} [data]  - Optional data to assign to the error.
 * @return {Error}          - The created error.
 */

/**
 * Function taking n objects to merge them together.
 * Note 1): the latter object will take precedence over the first one.
 * Note 2): the first object will be mutated to allow for perf scenarios.
 * Note 3): this function will consider monkeys as leaves.
 *
 * @param  {boolean}   deep    - Whether the merge should be deep or not.
 * @param  {...object} objects - Objects to merge.
 * @return {object}            - The merged object.
 */

/**
 * Solving a potentially relative path.
 *
 * @param  {array} base - The base path from which to solve the path.
 * @param  {array} to   - The subpath to reach.
 * @param  {array}      - The solved absolute path.
 */

// Coercing to array

/**
 * Function determining whether some paths in the tree were affected by some
 * updates that occurred at the given paths. This helper is mainly used at
 * cursor level to determine whether the cursor is concerned by the updates
 * fired at tree level.
 *
 * NOTES: 1) If performance become an issue, the following threefold loop
 *           can be simplified to a complex twofold one.
 *        2) A regex version could also work but I am not confident it would
 *           be faster.
 *        3) Another solution would be to keep a register of cursors like with
 *           the monkeys and update along this tree.
 *
 * @param  {array} affectedPaths - The paths that were updated.
 * @param  {array} comparedPaths - The paths that we are actually interested in.
 * @return {boolean}             - Is the update relevant to the compared
 *                                 paths?
 */

// Looping through possible paths

// Looping through logged paths

// Looping through steps

// If we reached last item and we are relevant

/**
 * Non-mutative version of the splice array method.
 *
 * @param  {array}    array        - The array to splice.
 * @param  {integer}  startIndex   - The start index.
 * @param  {integer}  nb           - Number of elements to remove.
 * @param  {...mixed} elements     - Elements to append after splicing.
 * @return {array}                 - The spliced array.
 */

// Solving startIndex

// Positive index

// Negative index

/**
 * Function returning a unique incremental id each time it is called.
 *
 * @return {integer} - The latest unique id.
 */

/**
 * Function returning the index of the first element of a list matching the
 * given predicate.
 *
 * @param  {array}     a  - The target array.
 * @param  {function}  fn - The predicate function.
 * @return {mixed}        - The index of the first matching item or -1.
 */

/**
 * Efficient slice function used to clone arrays or parts of them.
 *
 * @param  {array} array - The array to slice.
 * @return {array}       - The sliced array.
 */

/**
 * Archive abstraction
 *
 * @constructor
 * @param {integer} size - Maximum number of records to store.
 */

/**
   * Function creating a real array from what should be an array but is not.
   * I'm looking at you nasty `arguments`...
   *
   * @param  {mixed} culprit - The culprit to convert.
   * @return {array}         - The real array.
   */

/**
   * Method retrieving the records.
   *
   * @return {array} - The records.
   */

/**
     * Method adding a record to the archive
     *
     * @param {object}  record - The record to store.
     * @return {Archive}       - The archive itself for chaining purposes.
     */

// If the number of records is exceeded, we truncate the records

/**
     * Method clearing the records.
     *
     * @return {Archive} - The archive itself for chaining purposes.
     */

/**
     * Method to go back in time.
     *
     * @param {integer} steps - Number of steps we should go back by.
     * @return {number}       - The last record.
     */

/**
 * Function cloning the given variable.
 *
 * @todo: implement a faster way to clone an array.
 *
 * @param  {boolean} deep - Should we deep clone the variable.
 * @param  {mixed}   item - The variable to clone
 * @return {mixed}        - The cloned variable.
 */

// Array

// Date

// RegExp

// Object

/**
 * Exporting shallow and deep cloning functions.
 */

// If we reached here via a recursive call, object may be undefined because

// not all items in a collection will have the same deep nesting structure.

/**
 * Function freezing the given variable if possible.
 *
 * @param  {boolean} deep - Should we recursively freeze the given objects?
 * @param  {object}  o    - The variable to freeze.
 * @return {object}    - The merged object.
 */

// Iterating through the elements

/**
 * Exporting both `freeze` and `deepFreeze` functions.
 * Note that if the engine does not support `Object.freeze` then this will
 * export noop functions instead.
 */

/**
 * Function retrieving nested data within the given object and according to
 * the given path.
 *
 * @todo: work if dynamic path hit objects also.
 * @todo: memoized perfgetters.
 *
 * @param  {object}  object - The object we need to get data from.
 * @param  {array}   path   - The path to follow.
 * @return {object}  result            - The result.
 * @return {mixed}   result.data       - The data at path, or `undefined`.
 * @return {array}   result.solvedPath - The solved path or `null`.
 * @return {boolean} result.exists     - Does the path exists in the tree?
 */

/**
 * Exporting both `shallowMerge` and `deepMerge` functions.
 */

/* 100 */

/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

/* global define */

/* 101 */

/* 102 */

/* 103 */

/* 104 */

/* 105 */

/* 106 */

/* 107 */

/* 108 */

/* 109 */

/* 110 */

/* 111 */

/* 112 */

/* 113 */

/* 114 */

/* 115 */

/* 116 */

/**
 * Baobab Monkeys
 * ===============
 *
 * Exposing both handy monkey definitions and the underlying working class.
 */

// Coercing paths for convenience

// Does the definition contain dynamic paths

/**
 * Monkey core class
 *
 * @constructor
 * @param {Baobab}           tree       - The bound tree.
 * @param {MonkeyDefinition} definition - A definition instance.
 */

// Properties

// Adapting the definition's paths & projection to this monkey's case

// Internal state

/**
     * Listener on the tree's `write` event.
     *
     * When the tree writes, this listener will check whether the updated paths
     * are of any use to the monkey and, if so, will update the tree's node
     * where the monkey sits.
     */

// Is the monkey affected by the current write event?

/**
     * Listener on the tree's `monkey` event.
     *
     * When another monkey updates, this listener will check whether the
     * updated paths are of any use to the monkey and, if so, will update the
     * tree's node where the monkey sits.
     */

// Breaking if this is the same monkey

// Binding listeners

// Updating relevant node

/**
   * Method returning solved paths related to the monkey.
   *
   * @param  {boolean} recursive - Should we compute recursive paths?
   * @return {array}             - An array of related paths.
   */

// Solving recursive path

/**
     * Method used to update the tree's internal data with a lazy getter holding
     * the computed data.
     *
     * @return {Monkey} - Returns itself for chaining purposes.
     */

// Should we write the lazy getter in the tree or solve it right now?

// Notifying the monkey's update so we can handle recursivity

/**
     * Method releasing the monkey from memory.
     */

// Unbinding events

// Deleting properties

// NOTE: not deleting this.definition because some strange things happen

// in the _refreshMonkeys method. See #372.

/* 117 */

/* 118 */

/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/* 119 */

/* 120 */

/**
 * Expose `pathToRegexp`.
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

// Match escaped characters that would otherwise appear in future matches.

// This allows the user to escape special characters that won't transform.

// Match Express-style parameters and un-named parameters with a prefix

// and optional suffixes. Matches appear as:

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

// Ignore already escaped sequences.

// Push the current path onto the tokens.

// Match any characters still remaining.

// If the path exists, push it onto the end.

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Prepend partial segment prefixes.

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/** @type {!Object} */

// Iterate over the tokens and create our regexp string.

// In non-strict mode we allow a slash at the end of match. If the path to

// match already ends with a slash, we remove it for consistency. The slash

// is valid at the end of a path match, not in the middle. This is important

// in non-ending mode, where "/test/" shouldn't match "/test//route".

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

// Use a negative lookahead to match only capturing groups.

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {!Array} */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {string} */

/* 121 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

// don't hoist over string (html) components

// Avoid failures from read-only properties

/* 122 */

/* 123 */

/* 124 */

// We need to centralize the zIndex definitions as they work

// like global values in the browser.

/* 125 */

/* 126 */

/* 127 */

/* 128 */

/* 129 */

/* 130 */

/* 131 */

/*
{enable: true, url: 'https://plus.google.com/112618720945759819017', icon: 'google-plus', color: '#d34836'},
{enable: true, url: 'https://twitter.com/jmarroyave', icon: 'twitter', color: '#00aced'},
*/

/* 132 */

/* 133 */

/* 134 */

/* 135 */

/* unused harmony export styles */

/* Styles applied to the root element. */

/* Styles applied to the root element if `variant="body2"`. */

/* Styles applied to the root element if `variant="body1"`. */

/* Styles applied to the root element if `variant="caption"`. */

/* Styles applied to the root element if `variant="button"`. */

/* Styles applied to the root element if `variant="h1"`. */

/* Styles applied to the root element if `variant="h2"`. */

/* Styles applied to the root element if `variant="h3"`. */

/* Styles applied to the root element if `variant="h4"`. */

/* Styles applied to the root element if `variant="h5"`. */

/* Styles applied to the root element if `variant="h6"`. */

/* Styles applied to the root element if `variant="subtitle1"`. */

/* Styles applied to the root element if `variant="subtitle2"`. */

/* Styles applied to the root element if `variant="overline"`. */

/* Styles applied to the root element if `variant="srOnly"`. Only accessible to screen readers. */

/* Styles applied to the root element if `align="left"`. */

/* Styles applied to the root element if `align="center"`. */

/* Styles applied to the root element if `align="right"`. */

/* Styles applied to the root element if `align="justify"`. */

/* Styles applied to the root element if `align="nowrap"`. */

/* Styles applied to the root element if `gutterBottom={true}`. */

/* Styles applied to the root element if `paragraph={true}`. */

/* Styles applied to the root element if `color="inherit"`. */

/* Styles applied to the root element if `color="primary"`. */

/* Styles applied to the root element if `color="secondary"`. */

/* Styles applied to the root element if `color="textPrimary"`. */

/* Styles applied to the root element if `color="textSecondary"`. */

/* Styles applied to the root element if `color="error"`. */

/* Styles applied to the root element if `display="inline"`. */

/* Styles applied to the root element if `display="block"`. */

/* 136 */

/* 137 */

/* 138 */

/* 139 */

/* 140 */

/* 141 */

/* 142 */

/* 143 */

/* 144 */

/* 145 */

/* 146 */

/* 147 */

/* 148 */

/* 149 */

/* 150 */

/* 151 */

/* 152 */

/* 153 */

/* 154 */

/* 155 */

/* 156 */

/* 157 */

/* 158 */

/* 159 */

/* 160 */

/* 161 */

/* 162 */

/* 163 */

/* 164 */

/* 165 */

/* 166 */

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

// Detect buggy property enumeration order in older V8 versions.

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// eslint-disable-line no-new-wrappers

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// We don't expect any of the above to throw, but better to be safe.

/* 167 */

/**
   * Here is the list of every allowed parameter when using Emitter#on:
   * @type {Object}
   */

/**
   * Incremental id used to order event handlers.
   */

/**
   * A simple helper to shallowly merge two objects. The second one will "win"
   * over the first one.
   *
   * @param  {object}  o1 First target object.
   * @param  {object}  o2 Second target object.
   * @return {object}     Returns the merged object.
   */

/**
   * Is the given variable a plain JavaScript object?
   *
   * @param  {mixed}  v   Target.
   * @return {boolean}    The boolean result.
   */

/**
   * Iterate over an object that may have ES6 Symbols.
   *
   * @param  {object}   object  Object on which to iterate.
   * @param  {function} fn      Iterator function.
   * @param  {object}   [scope] Optional scope.
   */

/**
   * The emitter's constructor. It initializes the handlers-per-events store and
   * the global handlers store.
   *
   * Emitters are useful for non-DOM events communication. Read its methods
   * documentation for more information about how it works.
   *
   * @return {Emitter}         The fresh new instance.
   */

// Dirty trick that will set the necessary properties to the emitter

/**
   * This method unbinds every handlers attached to every or any events. So,
   * these functions will no more be executed when the related events are
   * emitted. If the functions were not bound to the events, nothing will
   * happen, and no error will be thrown.
   *
   * Usage:
   * ******
   * > myEmitter.unbindAll();
   *
   * @return {Emitter}      Returns this.
   */

/**
   * This method unbinds one or more functions from events of the emitter. So,
   * these functions will no more be executed when the related events are
   * emitted. If the functions were not bound to the events, nothing will
   * happen, and no error will be thrown.
   *
   * Variant 1:
   * **********
   * > myEmitter.off('myEvent', myHandler);
   *
   * @param  {string}   event   The event to unbind the handler from.
   * @param  {function} handler The function to unbind.
   * @return {Emitter}          Returns this.
   *
   * Variant 2:
   * **********
   * > myEmitter.off(['myEvent1', 'myEvent2'], myHandler);
   *
   * @param  {array}    events  The events to unbind the handler from.
   * @param  {function} handler The function to unbind.
   * @return {Emitter}          Returns this.
   *
   * Variant 3:
   * **********
   * > myEmitter.off({
   * >   myEvent1: myHandler1,
   * >   myEvent2: myHandler2
   * > });
   *
   * @param  {object} bindings An object containing pairs event / function.
   * @return {Emitter}         Returns this.
   *
   * Variant 4:
   * **********
   * > myEmitter.off(myHandler);
   *
   * @param  {function} handler The function to unbind from every events.
   * @return {Emitter}          Returns this.
   *
   * Variant 5:
   * **********
   * > myEmitter.off(event);
   *
   * @param  {string} event     The event we should unbind.
   * @return {Emitter}          Returns this.
   */

/**
   * This method binds one or more functions to the emitter, handled to one or a
   * suite of events. So, these functions will be executed anytime one related
   * event is emitted.
   *
   * It is also possible to bind a function to any emitted event by not
   * specifying any event to bind the function to.
   *
   * Recognized options:
   * *******************
   *  - {?boolean} once   If true, the handlers will be unbound after the first
   *                      execution. Default value: false.
   *  - {?object}  scope  If a scope is given, then the listeners will be called
   *                      with this scope as "this".
   *
   * Variant 1:
   * **********
   * > myEmitter.on('myEvent', function(e) { console.log(e); });
   * > // Or:
   * > myEmitter.on('myEvent', function(e) { console.log(e); }, { once: true });
   *
   * @param  {string}   event   The event to listen to.
   * @param  {function} handler The function to bind.
   * @param  {?object}  options Eventually some options.
   * @return {Emitter}          Returns this.
   *
   * Variant 2:
   * **********
   * > myEmitter.on(
   * >   ['myEvent1', 'myEvent2'],
   * >   function(e) { console.log(e); }
   * >);
   * > // Or:
   * > myEmitter.on(
   * >   ['myEvent1', 'myEvent2'],
   * >   function(e) { console.log(e); }
   * >   { once: true }}
   * >);
   *
   * @param  {array}    events  The events to listen to.
   * @param  {function} handler The function to bind.
   * @param  {?object}  options Eventually some options.
   * @return {Emitter}          Returns this.
   *
   * Variant 3:
   * **********
   * > myEmitter.on({
   * >   myEvent1: function(e) { console.log(e); },
   * >   myEvent2: function(e) { console.log(e); }
   * > });
   * > // Or:
   * > myEmitter.on({
   * >   myEvent1: function(e) { console.log(e); },
   * >   myEvent2: function(e) { console.log(e); }
   * > }, { once: true });
   *
   * @param  {object}  bindings An object containing pairs event / function.
   * @param  {?object}  options Eventually some options.
   * @return {Emitter}          Returns this.
   *
   * Variant 4:
   * **********
   * > myEmitter.on(function(e) { console.log(e); });
   * > // Or:
   * > myEmitter.on(function(e) { console.log(e); }, { once: true});
   *
   * @param  {function} handler The function to bind to every events.
   * @param  {?object}  options Eventually some options.
   * @return {Emitter}          Returns this.
   */

// Variant 3

// Variant 1, 2 and 4

// Defining the list in which the handler should be inserted

// Appending needed properties

/**
   * This method works exactly as the previous #on, but will add an options
   * object if none is given, and set the option "once" to true.
   *
   * The polymorphism works exactly as with the #on method.
   */

// Variant 4:

// Handlers bound to events:

// Generic Handlers

// Complex handlers

// Variant 5

/**
   * This method retrieve the listeners attached to a particular event.
   *
   * @param  {?string}    Name of the event.
   * @return {array}      Array of handler functions.
   */

// If we have any complex handlers, we need to sort

/**
   * This method emits the specified event(s), and executes every handlers bound
   * to the event(s).
   *
   * Use cases:
   * **********
   * > myEmitter.emit('myEvent');
   * > myEmitter.emit('myEvent', myData);
   * > myEmitter.emit(['myEvent1', 'myEvent2']);
   * > myEmitter.emit(['myEvent1', 'myEvent2'], myData);
   * > myEmitter.emit({myEvent1: myData1, myEvent2: myData2});
   *
   * @param  {string|array} events The event(s) to emit.
   * @param  {object?}      data   The data.
   * @return {Emitter}             Returns this.
   */

// Short exit if the emitter is disabled

// Object variant

// Cleaning onces

/**
   * This method will unbind all listeners and make it impossible to ever
   * rebind any listener to any event.
   */

// Nooping methods

/**
   * This method disabled the emitter, which means its emit method will do
   * nothing.
   *
   * @return {Emitter} Returns this.
   */

/**
   * This method enables the emitter.
   *
   * @return {Emitter} Returns this.
   */

/**
   * Version:
   */

/* 168 */

/* 169 */

/* 170 */

/**
 * Baobab Data Structure
 * ======================
 *
 * A handy data tree with cursors.
 */

// Should the tree handle its transactions on its own?

// Should the transactions be handled asynchronously?

// Should the tree's data be immutable?

// Should the monkeys be lazy?

// Should we evaluate monkeys?

// Should the tree be persistent?

// Should the tree's update be pure?

// Validation specifications

// Validation behavior 'rollback' or 'notify'

/**
 * Function returning a string hash from a non-dynamic path expressed as an
 * array.
 *
 * @param  {array}  path - The path to hash.
 * @return {string} string - The resultant hash.
 */

/**
 * Baobab class
 *
 * @constructor
 * @param {object|array} [initialData={}]    - Initial data passed to the tree.
 * @param {object}       [opts]              - Optional options.
 * @param {boolean}      [opts.autoCommit]   - Should the tree auto-commit?
 * @param {boolean}      [opts.asynchronous] - Should the tree's transactions
 *                                             handled asynchronously?
 * @param {boolean}      [opts.immutable]    - Should the tree be immutable?
 * @param {boolean}      [opts.persistent]   - Should the tree be persistent?
 * @param {boolean}      [opts.pure]         - Should the tree be pure?
 * @param {function}     [opts.validate]     - Validation function.
 * @param {string}       [opts.validationBehaviour] - "rollback" or "notify".
 */

// Checking whether given initial data is valid

// Setting initialData to an empty object if no data is provided by use

// Merging given options with defaults

// Disabling immutability & persistence if persistence if disabled

// Privates

// Does the user want an immutable tree?

// Registering the initial monkeys

// Initial validation

/**
   * Monkey helper.
   */

/**
   * Internal method used to refresh the tree's monkey register on every
   * update.
   * Note 1) For the time being, placing monkeys beneath array nodes is not
   * allowed for performance reasons.
   *
   * @param  {mixed}   node      - The starting node.
   * @param  {array}   path      - The starting node's path.
   * @param  {string}  operation - The operation that lead to a refreshment.
   * @return {Baobab}            - The tree instance for chaining purposes.
   */

// Should we sit a monkey in the tree?

// Object iteration

// Walking the whole tree

// Is this required that we clean some already existing monkeys?

// Let's walk the tree only from the updated point

/**
     * Method used to validate the tree's data.
     *
     * @return {boolean} - Is the tree valid?
     */

/**
     * Method used to select data within the tree by creating a cursor. Cursors
     * are kept as singletons by the tree for performance and hygiene reasons.
     *
     * Arity (1):
     * @param {path}    path - Path to select in the tree.
     *
     * Arity (*):
     * @param {...step} path - Path to select in the tree.
     *
     * @return {Cursor}      - The resultant cursor.
     */

// Checking that given path is valid

// If no path is given, we simply return the root

// Variadic

// Casting to array

// Computing hash (done here because it would be too late to do it in the

// cursor's constructor since we need to hit the cursors' index first).

// Creating a new cursor or returning the already existing one for the

// requested path.

// Emitting an event to notify that a part of the tree was selected

/**
     * Method used to update the tree. Updates are simply expressed by a path,
     * dynamic or not, and an operation.
     *
     * This is where path solving should happen and not in the cursor.
     *
     * @param  {path}   path      - The path where we'll apply the operation.
     * @param  {object} operation - The operation to apply.
     * @return {mixed} - Return the result of the update.
     */

// Coercing path

// Solving the given path

// If we couldn't solve the path, we throw

// Read-only path?

// We don't unset irrelevant paths

// If we merge data, we need to acknowledge monkeys

// Cloning the operation not to create weird behavior for the user

// Fetching the existing node in the current data

// Stashing previous data if this is the frame's first update

// Applying the operation

// If because of purity, the update was moot, we stop here

// If the operation is push, the affected path is slightly different

// Should we let the user commit?

// Updating data and transaction

// Updating the monkeys

// Emitting a `write` event

// Should we update asynchronously?

// Updating asynchronously

/**
     * Method committing the updates of the tree and firing the tree's events.
     *
     * @return {Baobab} - The tree instance for chaining purposes.
     */

// Do not fire update if the transaction is empty

// Clearing timeout if one was defined

// Is the tree still valid?

// Caching to keep original references before we change them

// Emitting update event

/**
     * Method returning a monkey at the given path or else `null`.
     *
     * @param  {path}        path - Path of the monkey to retrieve.
     * @return {Monkey|null}      - The Monkey instance of `null`.
     */

/**
     * Method used to watch a collection of paths within the tree. Very useful
     * to bind UI components and such to the tree.
     *
     * @param  {object} mapping - Mapping of paths to listen.
     * @return {Cursor}         - The created watcher.
     */

/**
     * Method releasing the tree and its attached data from memory.
     */

// Releasing cursors

// Killing event emitter

/**
     * Overriding the `toJSON` method for convenient use with JSON.stringify.
     *
     * @return {mixed} - Data at cursor.
     */

/**
     * Overriding the `toString` method for debugging purposes.
     *
     * @return {string} - The baobab's identity.
     */

/**
 * Exposing some internals for convenience
 */

/**
 * Version
 */

/* 171 */

// About 1.5x faster than the two-arg version of Array#splice()

// This implementation is based heavily on node's url.parse

// to is absolute

// to is relative, drop the filename

/* 172 */

/* 173 */

/*!
 * UAParser.js v0.7.18
 * Lightweight JavaScript-based User-Agent string parser
 * https://github.com/faisalman/ua-parser-js
 *
 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
 * Dual licensed under GPLv2 or MIT
 */

/* globals __webpack_amd_options__ */

/* 174 */

/* 175 */

/* 176 */

/* 177 */

/* 178 */

/* global window */

/* 179 */

/* 180 */

/* 181 */

/**
 * Converts a color from CSS rgb format to CSS hex format.
 *
 * @param {string} color - RGB color, i.e. rgb(n, n, n)
 * @returns {string} A CSS rgb color string, i.e. #nnnnnn
 */

/* 182 */

/* 183 */

// EXTERNAL MODULE: ./node_modules/react/index.js

// Wait for jsdom to support the match media feature.

// All the browsers Material-UI support have this built-in.

// This defensive check is here for simplicity.

// Most of the time, the match media logic isn't central to people tests.

/**
       * innerWidth |xs      sm      md      lg      xl
       *            |-------|-------|-------|-------|------>
       * width      |  xs   |  sm   |  md   |  lg   |  xl
       */

// When rendering the component on the server,

// we have no idea about the client browser screen width.

// In order to prevent blinks and help the reconciliation of the React tree

// we are not rendering the child component.

// An alternative is to use the `initialWidth` property.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/withWidth/withWidth.js

// By default, returns true if screen width is the same or greater than the given breakpoint.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Hidden/HiddenJs.js

/**
 * @ignore - internal component.
 */

// `only` check is faster to get out sooner if used.

// Allow `only` to be combined with other props. If already hidden, no need to check others.

// determine visibility based on the smallest size up

/**
   * The content of the component.
   */

/**
   * @ignore
   */

/**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   */

/**
   * You can use this prop when choosing the `js` implementation with server-side rendering.
   *
   * As `window.innerWidth` is unavailable on the server,
   * we default to rendering an empty component during the first mount.
   * You might want to use an heuristic to approximate
   * the screen width of the client browser screen width.
   *
   * For instance, you could be using the user-agent or the client-hints.
   * https://caniuse.com/#search=client%20hint
   */

/**
   * If true, screens this size and down will be hidden.
   */

/**
   * If true, screens this size and up will be hidden.
   */

/**
   * Hide the given breakpoint(s).
   */

/**
   * @ignore
   * width prop provided by withWidth decorator.
   */

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/defineProperty.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Hidden/Hidden.js

/**
 * Responsively hides children based on the selected implementation.
 */

// EXTERNAL MODULE: ./node_modules/react-device-detect/dist/index.js

// CONCATENATED MODULE: ./src/core/ui/layout/proxy.js

/* 184 */

/* 185 */

/* 186 */

/* 187 */

/* 188 */

/* 189 */

/* 190 */

/* 191 */

/* 192 */

/* 193 */

/* 194 */

/* 195 */

/* 196 */

/* 197 */

/* 198 */

/* 199 */

/* 200 */

/* 201 */

/* 202 */

/* 203 */

/* 204 */

/* 205 */

/* 206 */

/* 207 */

/* 208 */

/* 209 */

/* 210 */

/* 211 */

/* 212 */

/* 213 */

/* 214 */

/* 215 */

/* 216 */

/* 217 */

/* 218 */

/* 219 */

/* 220 */

/* 221 */

/* 222 */

/**
 * Baobab Cursors
 * ===============
 *
 * Cursors created by selecting some data within a Baobab tree.
 */

/**
 * Traversal helper function for dynamic cursors. Will throw a legible error
 * if traversal is not possible.
 *
 * @param {string} method     - The method name, to create a correct error msg.
 * @param {array}  solvedPath - The cursor's solved path.
 */

/**
 * Cursor class
 *
 * @constructor
 * @param {Baobab} tree   - The cursor's root.
 * @param {array}  path   - The cursor's path in the tree.
 * @param {string} hash   - The path's hash computed ahead by the tree.
 */

// If no path were to be provided, we fallback to an empty path (root)

// State

// Checking whether the given path is dynamic or not

// Checking whether the given path will meet a monkey

/**
     * Listener bound to the tree's writes so that cursors with dynamic paths
     * may update their solved path correctly.
     *
     * @param {object} event - The event fired by the tree.
     */

/**
     * Listener bound to the tree's updates and determining whether the
     * cursor is affected and should react accordingly.
     *
     * Note that this listener is lazily bound to the tree to be sure
     * one wouldn't leak listeners when only creating cursors for convenience
     * and not to listen to updates specifically.
     *
     * @param {object} event - The event fired by the tree.
     */

// Lazy binding

// If the path is dynamic, we actually need to listen to the tree

// Overriding the emitter `on` and `once` methods

/**
   * Method used to allow iterating over cursors containing list-type data.
   *
   * e.g. for(let i of cursor) { ... }
   *
   * @returns {object} -  Each item sequentially.
   */

/**
   * Internal helpers
   * -----------------
   */

/**
   * Method returning the paths of the tree watched over by the cursor and that
   * should be taken into account when solving a potential update.
   *
   * @return {array} - Array of paths to compare with a given update.
   */

// Checking whether we should keep track of some dependencies

/**
     * Predicates
     * -----------
     */

/**
     * Method returning whether the cursor is at root level.
     *
     * @return {boolean} - Is the cursor the root?
     */

/**
     * Method returning whether the cursor is at leaf level.
     *
     * @return {boolean} - Is the cursor a leaf?
     */

/**
     * Method returning whether the cursor is at branch level.
     *
     * @return {boolean} - Is the cursor a branch?
     */

/**
     * Traversal Methods
     * ------------------
     */

/**
     * Method returning the root cursor.
     *
     * @return {Baobab} - The root cursor.
     */

/**
     * Method selecting a subpath as a new cursor.
     *
     * Arity (1):
     * @param  {path} path    - The path to select.
     *
     * Arity (*):
     * @param  {...step} path - The path to select.
     *
     * @return {Cursor}       - The created cursor.
     */

/**
     * Method returning the parent node of the cursor or else `null` if the
     * cursor is already at root level.
     *
     * @return {Baobab} - The parent cursor.
     */

/**
     * Method returning the child node of the cursor.
     *
     * @return {Baobab} - The child cursor.
     */

/**
     * Method returning the left sibling node of the cursor if this one is
     * pointing at a list. Returns `null` if this cursor is already leftmost.
     *
     * @return {Baobab} - The left sibling cursor.
     */

/**
     * Method returning the right sibling node of the cursor if this one is
     * pointing at a list. Returns `null` if this cursor is already rightmost.
     *
     * @return {Baobab} - The right sibling cursor.
     */

/**
     * Method returning the leftmost sibling node of the cursor if this one is
     * pointing at a list.
     *
     * @return {Baobab} - The leftmost sibling cursor.
     */

/**
     * Method returning the rightmost sibling node of the cursor if this one is
     * pointing at a list.
     *
     * @return {Baobab} - The rightmost sibling cursor.
     */

/**
     * Method mapping the children nodes of the cursor.
     *
     * @param  {function} fn      - The function to map.
     * @param  {object}   [scope] - An optional scope.
     * @return {array}            - The resultant array.
     */

/**
     * Getter Methods
     * ---------------
     */

/**
     * Internal get method. Basically contains the main body of the `get` method
     * without the event emitting. This is sometimes needed not to fire useless
     * events.
     *
     * @param  {path}   [path=[]]       - Path to get in the tree.
     * @return {object} info            - The resultant information.
     * @return {mixed}  info.data       - Data at path.
     * @return {array}  info.solvedPath - The path solved when getting.
     */

/**
     * Method used to check whether a certain path exists in the tree starting
     * from the current cursor.
     *
     * Arity (1):
     * @param  {path}   path           - Path to check in the tree.
     *
     * Arity (2):
     * @param {..step}  path           - Path to check in the tree.
     *
     * @return {boolean}               - Does the given path exists?
     */

/**
     * Method used to get data from the tree. Will fire a `get` event from the
     * tree so that the user may sometimes react upon it to fetch data, for
     * instance.
     *
     * Arity (1):
     * @param  {path}   path           - Path to get in the tree.
     *
     * Arity (2):
     * @param  {..step} path           - Path to get in the tree.
     *
     * @return {mixed}                 - Data at path.
     */

// Emitting the event

/**
     * Method used to shallow clone data from the tree.
     *
     * Arity (1):
     * @param  {path}   path           - Path to get in the tree.
     *
     * Arity (2):
     * @param  {..step} path           - Path to get in the tree.
     *
     * @return {mixed}                 - Cloned data at path.
     */

/**
     * Method used to deep clone data from the tree.
     *
     * Arity (1):
     * @param  {path}   path           - Path to get in the tree.
     *
     * Arity (2):
     * @param  {..step} path           - Path to get in the tree.
     *
     * @return {mixed}                 - Cloned data at path.
     */

/**
     * Method used to return raw data from the tree, by carefully avoiding
     * computed one.
     *
     * @todo: should be more performant as the cloning should happen as well as
     * when dropping computed data.
     *
     * Arity (1):
     * @param  {path}   path           - Path to serialize in the tree.
     *
     * Arity (2):
     * @param  {..step} path           - Path to serialize in the tree.
     *
     * @return {mixed}                 - The retrieved raw data.
     */

/**
     * Method used to project some of the data at cursor onto a map or a list.
     *
     * @param  {object|array} projection - The projection's formal definition.
     * @return {object|array}            - The resultant map/list.
     */

/**
     * History Methods
     * ----------------
     */

/**
     * Methods starting to record the cursor's successive states.
     *
     * @param  {integer} [maxRecords] - Maximum records to keep in memory. Note
     *                                  that if no number is provided, the cursor
     *                                  will keep everything.
     * @return {Cursor}               - The cursor instance for chaining purposes.
     */

/**
     * Methods stopping to record the cursor's successive states.
     *
     * @return {Cursor} - The cursor instance for chaining purposes.
     */

/**
     * Methods undoing n steps of the cursor's recorded states.
     *
     * @param  {integer} [steps=1] - The number of steps to rollback.
     * @return {Cursor}            - The cursor instance for chaining purposes.
     */

/**
     * Methods returning whether the cursor has a recorded history.
     *
     * @return {boolean} - `true` if the cursor has a recorded history?
     */

/**
     * Methods returning the cursor's history.
     *
     * @return {array} - The cursor's history.
     */

/**
     * Methods clearing the cursor's history.
     *
     * @return {Cursor} - The cursor instance for chaining purposes.
     */

/**
     * Releasing
     * ----------
     */

/**
     * Methods releasing the cursor from memory.
     */

// Removing listeners on parent

// Unsubscribe from the parent

// Dereferencing

// Killing emitter

/**
     * Output
     * -------
     */

/**
     * Overriding the `toString` method for debugging purposes.
     *
     * @return {string} - The cursor's identity.
     */

/**
 * Setter Methods
 * ---------------
 *
 * Those methods are dynamically assigned to the class for DRY reasons.
 */

// Not using a Set so that ES5 consumers don't pay a bundle size price

/**
 * Function creating a setter method for the Cursor class.
 *
 * @param {string}   name          - the method's name.
 * @param {function} [typeChecker] - a function checking that the given value is
 *                                   valid for the given operation.
 */

/**
   * Binding a setter method to the Cursor class and having the following
   * definition.
   *
   * Note: this is not really possible to make those setters variadic because
   * it would create an impossible polymorphism with path.
   *
   * @todo: perform value validation elsewhere so that tree.update can
   * beneficiate from it.
   *
   * Arity (1):
   * @param  {mixed} value - New value to set at cursor's path.
   *
   * Arity (2):
   * @param  {path}  path  - Subpath to update starting from cursor's.
   * @param  {mixed} value - New value to set.
   *
   * @return {mixed}       - Data at path.
   */

// We should warn the user if he applies to many arguments to the function

// Handling arities

// Checking the path's validity

// Coerce path

// Checking the value's validity

// Checking the solvability of the cursor's dynamic path

// Filing the update to the tree

/**
 * Making the necessary setters.
 */

/* 223 */

/**
 * Baobab Update
 * ==============
 *
 * The tree's update scheme.
 */

/**
 * Function aiming at applying a single update operation on the given tree's
 * data.
 *
 * @param  {mixed}  data      - The tree's data.
 * @param  {path}   path      - Path of the update.
 * @param  {object} operation - The operation to apply.
 * @param  {object} [opts]    - Optional options.
 * @return {mixed}            - Both the new tree's data and the updated node.
 */

// If we reached the end of the path, we apply the operation

// Current item's reference is therefore p[s]

// The reason why we don't create a variable here for convenience

// is because we actually need to mutate the reference.

// Updating the path

/**
       * Set
       */

// Purity check

/**
       * Monkey
       */

/**
           * Push
           */

/**
             * Unshift
             */

/**
               * Concat
               */

/**
                 * Splice
                 */

/**
                   * Pop
                   */

/**
                     * Shift
                     */

/**
                       * Unset
                       */

/**
                           * Deep merge
                           */

// Deep freezing the resulting value

// If we reached a leaf, we override by setting an empty object

// Should we freeze the current step before continuing?

// If we are updating a dynamic node, we need not return the affected node

// Returning new data object

/* 224 */

/**
 * Baobab-React Helpers
 * =====================
 *
 * Miscellaneous helper functions.
 */

/**
 * Simple curry function.
 */

/**
 * Solving the mapping given to a higher-order construct.
 */

/**
 * Determines if the given tree is a Baobab tree.
 * FIXME: if Baobab ever implements something like Array.isArray we should use
 * that instead of relying in the internal _identity = '[object Baobab]' value.
 * See https://github.com/Yomguithereal/baobab/blob/master/src/baobab.js#L111
 */

/* 225 */

/* 226 */

/* 227 */

/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 0 },
 *   entered:  { opacity: 1 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

// In the context of a TransitionGroup all enters are really appears

// getSnapshotBeforeUpdate(prevProps) {

//   let nextStatus = null

//   if (prevProps !== this.props) {

//     const { status } = this.state

//     if (this.props.in) {

//       if (status !== ENTERING && status !== ENTERED) {

//         nextStatus = ENTERING

//       }

//     } else {

//       if (status === ENTERING || status === ENTERED) {

//         nextStatus = EXITING

//     }

//   }

//   return { nextStatus }

// TODO: remove fallback for next major

// nextStatus will always be ENTERING or EXITING.

// no enter animation skip right to ENTERED

// if we are mounting and running this it means appear _must_ be set

// no exit animation skip right to EXITED

// This shouldn't be necessary, but there are weird race conditions with

// setState callbacks and unmounting in testing, so always make sure that

// we can cancel any pending setState callbacks after we unmount.

// filter props for Transtition

/* 228 */

// Call this.constructor.gDSFP to support sub-classes.

// Binding "this" is important for shallow renderer support.

// Use the setState() updater to ensure state isn't stale in certain edge cases.

// React may warn about cWM/cWRP/cWU methods being deprecated.

// Add a flag to suppress these warnings for this special case.

// If new component APIs are defined, "unsafe" lifecycles won't be called.

// Error if any of these lifecycles are present,

// Because they would work differently between older and newer (16.3+) versions of React.

// React <= 16.2 does not support static getDerivedStateFromProps.

// As a workaround, use cWM and cWRP to invoke the new static lifecycle.

// Newer versions of React will ignore these lifecycles if gDSFP exists.

// React <= 16.2 does not support getSnapshotBeforeUpdate.

// As a workaround, use cWU to invoke the new lifecycle.

// Newer versions of React will ignore that lifecycle if gSBU exists.

// 16.3+ will not execute our will-update method;

// It will pass a snapshot value to did-update though.

// Older versions will require our polyfilled will-update value.

// We need to handle both cases, but can't just check for the presence of "maybeSnapshot",

// Because for <= 15.x versions this might be a "prevContext" object.

// We also can't just check "__reactInternalSnapshot",

// Because get-snapshot might return a falsy value.

// So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.

/* 229 */

/* 230 */

// Initial children should all be entering, dependent on appear

/**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

/* 231 */

/* 232 */

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */

/* 233 */

/* 234 */

// Only Node.JS has a process variable that is of [[Class]] process

// For node use HTTP adapter

// For browsers use XHR adapter

/* Ignore */

/**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */

/* 235 */

// HTTP basic authentication

// Add xsrf header

// This is only done if running in a standard browser environment.

// Specifically not if we're in a web worker, or react-native.

// Set the request timeout in MS

// Listen for ready state

// The request errored out and we didn't get a response, this will be

// handled by onerror instead

// With one exception: request that using file: protocol, most browsers

// will return status as 0 even though it's a successful request

// Prepare the response

// Clean up request

// Handle browser request cancellation (as opposed to a manual cancellation)

// Handle low level network errors

// Real errors are hidden from us by the browser

// onerror should only fire if it's a network error

// Handle timeout

// Add headers to the request

// Add responseType to request if needed

// Remove Content-Type if data is undefined

// Otherwise add header to the request

// Add withCredentials to request if needed

// Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.

// But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.

// Handle progress if needed

// Not all browsers support upload events

// Handle cancellation

// Send the request

/* 236 */

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */

/* 237 */

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */

// eslint-disable-next-line no-param-reassign

/* 238 */

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

/* 239 */

/* harmony reexport (safe) */

/* 240 */

/* Styles applied to the root element if `color="action"`. */

/* Styles applied to the root element if `color="disabled"`. */

/* Styles applied to the root element if `fontSize="inherit"`. */

/* Styles applied to the root element if `fontSize="small"`. */

/* Styles applied to the root element if `fontSize="large"`. */

/* 241 */

/* 242 */

/* 243 */

/* 244 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/ownerDocument.js

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/utils/reactHelpers.js

/**
 * Portals provide a first-class way to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Portal/Portal.js

// #StrictMode ready

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/utils/helpers.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/createClass.js

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 3 modules

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/getScrollbarSize.js

// A change of the browser zoom change the scrollbar size.

// Credit https://github.com/twbs/bootstrap/blob/3ffe3a5d82f6f561b82ff78d82b32a7d14aed558/js/src/modal.js#L512-L519

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/ownerWindow.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/ModalManager.js

// Do we have a vertical scrollbar?

// Use computed style, here to get the real padding to add our scrollbar width.

// .mui-fixed is a global helper.

/**
 * @ignore - do not document.
 *
 * Proper state management for containers and the modals in those containers.
 * Simplified, but inspired by react-overlay's ModalManager class.
 * Used by the Modal to ensure proper styling of containers.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/classCallCheck.js

// this.modals[modalIndex] = modal

// this.contaniners[containerIndex] = {

//   modals: [],

//   container,

//   restore: null,

// If the modal we are adding is already in the DOM.

// If that was the last modal in a container, clean up the container.

// The modal might be closed before it had the chance to be mounted in the DOM.

// In case the modal wasn't in the DOM yet.

// Otherwise make sure the next top modal is visible to a screen reader.

// as soon as a modal is adding its modalRef is undefined. it can't set

// aria-hidden because the dom element doesn't exist either

// when modal was unmounted before modalRef gets null

// EXTERNAL MODULE: ./node_modules/warning/warning.js

/*

In the future, we should be able to replace TrapFocus with:
https://github.com/facebook/react/blob/master/packages/react-events/docs/FocusScope.md

```jsx
import FocusScope from 'react-dom/FocusScope';

function TrapFocus(props) {
  const {
    children
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableRestoreFocus = false,
    open,
  } = props;

  if (!open) {
    return children;
  }

  return (
    <FocusScope
      autoFocus={!disableAutoFocus}
      contain={!disableEnforceFocus}
      restoreFocus={!disableRestoreFocus}
    >
      {children}
    </FocusScope>
  );
}
```

*/

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/TrapFocus.js

/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */

// ⚠️ You may rely on React.useMemo as a performance optimization, not as a semantic guarantee.

// https://reactjs.org/docs/hooks-reference.html#usememo

// eslint-disable-line react-hooks/exhaustive-deps

// We might render an empty child.

// 9 = Tab

// We need to ignore the next contain as

// it will try to move the focus back to the rootRef element.

// Make sure the next tab starts from the right place.

// With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area

// e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.

// The whatwg spec defines how the browser should behave but does not explicitly mention any events:

// https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.

// restoreLastFocus()

// In IE 11 it is possible for document.activeElement to be null resulting

// in nodeToRestore.current being null.

// Not all elements in IE 11 have a focus method.

// Once IE 11 support is dropped the focus() call can be unconditional.

// Remove grey highlight

// Disable scroll capabilities.

/* Styles applied to the root element if `invisible={true}`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/SimpleBackdrop.js

// A modal manager used to track and manage the state of open Modals.

// Modals don't open on the server so this won't conflict with concurrent requests.

// Fix a bug on Chrome where the scroll isn't initially 0.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Modal/Modal.js

// The element was already mounted.

/* Styles applied to the root element if the `Modal` has exited. */

// FixMe: Always apply document role. Revisit once React Flare is released

// It's a Transition like component

// We don't take event.defaultPrevented into account:

// event.preventDefault() is meant to stop default behaviours like

// clicking a checkbox to check it, hitting a button to submit a form,

// and hitting left arrow to move the cursor in a text input etc.

// Only special HTML elements have these default behaviors.

// Swallow the event, in case someone is listening for the escape key on the body.

// allows for nested Transitions

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/styles/transitions.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Fade/Fade.js

// So the animation always start from the start.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/debounce.js

// Corresponds to 10 frames at 60 Hz.

// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.

// eslint-disable-next-line consistent-this

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Slide/Slide.js

// Translate the node so he can't be seen on the screen.

// Later, we gonna translate back the node to his original location

// with `none`.`

// Skip configuration where the position is screen size invariant.

// We need to update the position of the drawer when the direction change and

// when it's hidden.

// No need for transitions when the component is hidden

/**
 * The Slide transition is used by the [Drawer](/components/drawers/) component.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */

// variant === temporary

/* Styles applied to the root element if `variant="permanent or persistent"`. */

/* Styles applied to the `Paper` component. */

// Add iOS momentum scrolling.

// temporary style

// We disable the focus ring for mouse, touch and keyboard users.

// At some point, it would be better to keep it for keyboard users.

// :focus-ring CSS pseudo-class will help.

/* Styles applied to the `Paper` component if `anchor="left"`. */

/* Styles applied to the `Paper` component if `anchor="right"`. */

/* Styles applied to the `Paper` component if `anchor="top"`. */

/* Styles applied to the `Paper` component if `anchor="bottom"`. */

/* Styles applied to the `Paper` component if `anchor="left"` & `variant` is not "temporary". */

/* Styles applied to the `Paper` component if `anchor="top"` & `variant` is not "temporary". */

/* Styles applied to the `Paper` component if `anchor="right"` & `variant` is not "temporary". */

/* Styles applied to the `Paper` component if `anchor="bottom"` & `variant` is not "temporary". */

/* Styles applied to the `Modal` component. */

// Explicitly set the default value to solve a bug on IE 11.

// Reset on touch devices, it doesn't add specificity

/* Styles applied to the root element if `edge="start"`. */

/* Styles applied to the root element if `edge="end"`. */

/* Pseudo-class applied to the root element if `disabled={true}`. */

/* Styles applied to the root element if `size="small"`. */

/* Styles applied to the children container element. */

/**
 * The props of the [Modal](/api/modal/) component are available
 * when `variant="temporary"` is set.
 */

// CONCATENATED MODULE: ./src/core/ui/drawer.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormControl/formControlState.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormControl/FormControlContext.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/TextareaAutosize/TextareaAutosize.js

// Visibility needed to hide the extra text area on iPads

// Remove from the content flow

// Ignore the scrollbar width

// Measure height of a textarea with a single row

// The height of the outer content

// Take the box sizing into account for applying this value as a style.

// Need a large enough different to update the height.

// This prevents infinite rendering loop.

// Need a large enough different to allow scrolling.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/InputBase/utils.js

// Supports determination of isControlled().

// Controlled input accepts its current value as a prop.

// @see https://facebook.github.io/react/docs/forms.html#controlled-components

// @param value

// @returns {boolean} true if string (including '') or number (including zero)

// Determine if field is empty or filled.

// Response determines if label is presented above field or as placeholder.

// @param obj

// @param SSR

// @returns {boolean} False when not present or empty string.

//                    True when any number or string with length.

// Determine if an Input is adorned on start.

// It's corresponding to the left with LTR.

// @returns {boolean} False when no adornments.

//                    True when adorned at the start.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/InputBase/InputBase.js

/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */

// The blur won't fire when the disabled state is set on a focused input.

// We need to book keep the focused state manually.

// Rename ref to inputRef as we don't know the

// provided `inputComponent` structure.

// Perform in the willUpdate

// Fix a bug with IE 11 where the focus/blur events are triggered

// while the input is disabled.

// Mimics the default input display property used by browsers for an input.

// Reset (19px), match the native input line-height

// Prevent padding issue with fullWidth.

/* Styles applied to the root element if the component is a descendant of `FormControl`. */

/* Styles applied to the root element if the component is focused. */

/* Styles applied to the root element if `disabled={true}`. */

/* Styles applied to the root element if `startAdornment` is provided. */

/* Styles applied to the root element if `endAdornment` is provided. */

/* Styles applied to the root element if `error={true}`. */

/* Styles applied to the `input` element if `margin="dense"`. */

/* Styles applied to the root element if `multiline={true}`. */

/* Styles applied to the root element if `fullWidth={true}`. */

/* Styles applied to the `input` element. */

// Reset for Safari

// Make the flex item shrink with Firefox

// Fix IE 11 width issue

// Firefox 19+

// IE 11

// Edge

// Reset Firefox invalid required input style

// Remove the padding when type=search.

// Show and hide the placeholder logic

/* Styles applied to the `input` element if `select={true}`. */

/* Styles applied to the `input` element if `multiline={true}`. */

/* Styles applied to the `input` element if `type="search"`. */

// Improve type search style.

/* Styles applied to the `input` element if `startAdornment` is provided. */

/* Styles applied to the `input` element if `endAdornment` is provided. */

/* Styles applied to the `input` element if `hiddenLabel={true}`. */

/* Styles applied to the root element if `disableUnderline={false}`. */

// Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FilledInput/FilledInput.js

/* Styles applied to the `input` if in `<FormControl hiddenLabel />`. */

// IE 11: fieldset with legend does not render

// a border radius. This maintains consistency

// by always having a legend rendered

// Match the Input Label

/* Styles applied to the legend element. */

/* Styles applied to the `NotchedOutline` element. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormControl/useFormControl.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/FormLabel/FormLabel.js

/* Pseudo-class applied to the root element if `focused={true}`. */

/* Pseudo-class applied to the root element if `error={true}`. */

/* Pseudo-class applied to the root element if `filled={true}`. */

/* Pseudo-class applied to the root element if `required={true}`. */

/* Styles applied to the asterisk element. */

/* Pseudo-class applied to the asterisk element. */

// slight alteration to spec spacing to match visual spec result

/* Styles applied to the root element if `margin="dense"`. */

// Compensation for the `Input.inputDense` style.

/* Styles applied to the `input` element if `shrink={true}`. */

/* Styles applied to the `input` element if `disableAnimation={false}`. */

/* Styles applied to the root element if `variant="filled"`. */

// Chrome's autofill feature gives the input field a yellow background.

// Since the input field is behind the label in the HTML tree,

// the input field is drawn last and hides the label with an opaque background color.

// zIndex: 1 will raise the label above opaque background-colors of input.

/* Styles applied to the root element if `variant="outlined"`. */

// see comment above on filled.zIndex

// We need to iterate through the children and find the Input in order

// to fully support server-side rendering.

// Reset fieldset default style.

/* Styles applied to the root element if `margin="normal"`. */

/* Styles applied to the root element if `variant="filled"` or `variant="outlined"`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/typeof.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Grow/Grow.js

/**
 * The Grow transition is used by the [Tooltip](/components/tooltips/) and
 * [Popover](/components/popover/) components.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Popover/Popover.js

// Sum the scrollTop between two elements.

// Returns the top/left offset of the position

// to attach to on the anchor element (or body if none is provided)

// If an anchor element wasn't provided, just use the parent body element of this Popover

// != the default value

// Check if the parent has requested anchoring on an inner content node

// Get the offset of of the anchoring element

// Calculate element positioning

// Check if the vertical axis needs shifting

// Check if the horizontal axis needs shifting

// Returns the vertical offset of inner content to anchor the transform on if provided

// Because we debounce the event, the open prop might no longer be true

// when the callback resolves.

// If the container prop is provided, use that

// If the anchorEl prop is provided, use its parent body element as the container

// If neither are provided let the Modal take care of choosing the container

// eslint-disable-next-line react/prop-types

// So we see the popover when it's empty.

// It's most likely on issue on userland.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/MenuList/MenuList.js

// jsdom doesn't support innerText

// Prevent infinite loop.

// Move to the next element.

// Let's ignore that piece of logic if users are already overriding the width

// of the menu.

// Reset

// specZ: The maximum height of a simple menu should be one or more rows less than the view

// height. This ensures a tapable area outside of the simple menu with which to dismiss

// the menu.

/* Styles applied to the `List` component via `MenuList`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Select/SelectInput.js

// Focus the display node so the focus is restored on this element once

// the menu is closed.

// Rerender with the resolve `displayRef` reference.

// No need to display any value if the field is empty.

// The value is most likely not a valid HTML attribute.

// Avoid performing a layout computation in the render method.

// TODO v5: merge root and select

// The native select doesn't respond to enter on MacOS, but it's recommended by

// https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html

// Opening the menu is going to blur the. It will be focused back when closed.

// The parent components are relying on the bubbling of the event.

// eslint-disable-next-line react/no-danger

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/internal/svg-icons/ArrowDropDown.js

/* Styles applied to the select component `root` class. */

/* Styles applied to the select component `select` class. */

// When interacting quickly, the text can end up selected.

// Native select can't be selected either.

// So it doesn't collapse.

// Show that it's not an text input

// Remove IE 11 arrow

/* Styles applied to the select component if `variant="filled"`. */

/* Styles applied to the select component if `variant="outlined"`. */

/* Styles applied to the select component `selectMenu` class. */

/* Pseudo-class applied to the select component `disabled` class. */

/* Styles applied to the select component `icon` class. */

// We use a position absolute over a flexbox in order to forward the pointer events

// to the input.

// Center vertically

// Most of the logic is implemented in `NativeSelectInput`.

// The `Select` component is a simple API wrapper to expose something better to play with.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/NativeSelect/NativeSelectInput.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Select/Select.js

// Most of the logic is implemented in `SelectInput`.

// We render a select. We can ignore the type provided by the `Input`.

/* Styles applied to the root element if `disableGutters={false}`. */

/* Styles applied to the root element if `selected={true}`. */

/* Styles applied to the root element if dense. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/TextField/TextField.js

// CONCATENATED MODULE: ./src/core/ui/search.js

//console.log(method);

//console.log(newValue, this.state.single);

/* Styles applied to the root element if `variant="regular"`. */

/* Styles applied to the root element if `variant="dense"`. */

// For correct alignment with the text.

/* Styles applied to the badge `span` element. */

// Render the badge on top of potential ripples.

/* Styles applied to the badge `span` element if `invisible={true}`. */

/* Styles applied to the root element if `variant="dot"`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/Toolbar/Toolbar.js

// CONCATENATED MODULE: ./src/core/ui/toolbar.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/makeStyles.js

// Antialiasing.

// Change from `box-sizing: content-box` so that `width`

// is not affected by `padding` or `border`.

// Remove the margin in all browsers.

// Save printer ink.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/CssBaseline/CssBaseline.js

/**
 * Kickstart an elegant, consistent, and simple baseline to build upon.
 */

// Prevent padding issue with the Modal and fixed positioned AppBar.

/* Styles applied to the root element if `position="fixed"`. */

/* Styles applied to the root element if `position="absolute"`. */

/* Styles applied to the root element if `position="sticky"`. */

/* Styles applied to the root element if `position="static"`. */

/* Styles applied to the root element if `position="relative"`. */

/* Styles applied to the root element if `color="default"`. */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/AppBar/AppBar.js

/**
 * This component takes a `theme` prop.
 * It makes the `theme` available down the React tree thanks to React context.
 * This component should preferably be used at **the root of your component tree**.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js

// To support composition of theme.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/MuiThemeProvider.js

/**
 * @ignore - do not document.
 */

// CONCATENATED MODULE: ./src/core/ui/app.js

// CONCATENATED MODULE: ./src/shared/globals/footer_links.js

// EXTERNAL MODULE: ./src/shared/globals/social_networks.js

// EXTERNAL MODULE: ./src/shared/globals/version.js

// CONCATENATED MODULE: ./src/shared/globals/footer.js

// CONCATENATED MODULE: ./src/jmarroyave/components/uxi/core/footer.js

// EXTERNAL MODULE: ./src/core/components/component.js + 1 modules

// EXTERNAL MODULE: ./src/core/components/com_version.scss

// CONCATENATED MODULE: ./src/core/components/com_version.js

// CONCATENATED MODULE: ./src/jmarroyave/components/uxi/core/header.js

// CONCATENATED MODULE: ./src/jmarroyave/components/uxi/core/app.js

/* 245 */

// CONCATENATED MODULE: ./src/core/ui/loading.js

// CONCATENATED MODULE: ./src/core/components/component.js

/* 246 */

/* 247 */

/* 248 */

/** Detect free variable `global` from Node.js. */

/* 249 */

/* 250 */

/* 251 */

/* 252 */

/* 253 */

/* 254 */

/* 255 */

/* 256 */

/* 257 */

/* 258 */

/* 259 */

/* 260 */

/* 261 */

/* 262 */

/* 263 */

/* 264 */

/* 265 */

/* 266 */

/* 267 */

/* 268 */

/* 269 */

/* 270 */

/* 271 */

/* 272 */

/* 273 */

/* 274 */

/* 275 */

/* 276 */

// Component.peek comes from react-side-effect:

// For testing, you may use a static peek() method available on the returned component.

// It lets you get the current state without resetting the mounted instance stack.

// Don’t use it for anything other than testing.

/**
             * @param {Object} base: {"target": "_blank", "href": "http://mysite.com/"}
             * @param {Object} bodyAttributes: {"className": "root"}
             * @param {String} defaultTitle: "Default Title"
             * @param {Boolean} defer: true
             * @param {Boolean} encodeSpecialCharacters: true
             * @param {Object} htmlAttributes: {"lang": "en", "amp": undefined}
             * @param {Array} link: [{"rel": "canonical", "href": "http://mysite.com/example"}]
             * @param {Array} meta: [{"name": "description", "content": "Test description"}]
             * @param {Array} noscript: [{"innerHTML": "<img src='http://mysite.com/js/test.js'"}]
             * @param {Function} onChangeClientState: "(newState) => console.log(newState)"
             * @param {Array} script: [{"type": "text/javascript", "src": "http://mysite.com/js/test.js"}]
             * @param {Array} style: [{"type": "text/css", "cssText": "div { display: block; color: blue; }"}]
             * @param {String} title: "Title"
             * @param {Object} titleAttributes: {"itemprop": "name"}
             * @param {String} titleTemplate: "MySite.com - %s"
             */

// provide fallback if mappedState is undefined

/* 277 */

/* 278 */

// We always will resolve, errors should be handled within loading UIs.

/* 279 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/is-plain-object/index.js

/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/isobject/index.js

/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

// If has modified constructor

// If has modified prototype

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/styles/createBreakpoints.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/createMixins.js

// import warning from 'warning';

// To deprecate in v4.1

//       warning(

//         false,

//         [

//           'Material-UI: theme.mixins.gutters() is deprecated.',

//           'You can use the source of the mixin directly:',

//           `

// paddingLeft: theme.spacing(2),

// paddingRight: theme.spacing(2),

// [theme.breakpoints.up('sm')]: {

//   paddingLeft: theme.spacing(3),

//   paddingRight: theme.spacing(3),

// },

// `,

//         ].join('\n'),

//       );

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/colors/indigo.js

// The colors used to style the text.

// The most important text.

// Secondary text.

// Disabled text have even lower visual prominence.

// Text hints.

// The color used to divide different elements.

// The background colors used to style the surfaces.

// Consistency between these values is important.

// The colors used to style the action elements.

// The color of an active action like an icon button.

// The color of an hovered action.

// The color of a selected action.

// The color of a disabled action.

// The background color of a disabled action.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/createTypography.js

// < 1kb payload overhead when lodash/merge is > 3kb.

/**
 * @see @link{https://material.io/design/typography/the-type-system.html}
 * @see @link{https://material.io/design/typography/understanding-typography.html}
 */

// Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/shadows.js

// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/styles/zIndex.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/styles/createMuiTheme.js

// Use the same logic as

// Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59

// and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54

// A collection of common colors.

// The palette type, can be light or dark.

// The colors used to represent primary interface elements for a user.

// The colors used to represent secondary interface elements for a user.

// The colors used to represent interface elements that the user should be made aware of.

// The grey colors.

// Used by `getContrastText()` to maximize the contrast between the background and

// the text.

// Take a background color and return the color of the text to maximize the contrast.

// Generate a rich color object.

// Used by the functions below to shift a color's luminance by approximately

// two indexes within its tonal palette.

// E.g., shift from Red 500 to Red 300 or Red 700.

// Already transformed.

// All components align to an 8dp square baseline grid for mobile, tablet, and desktop.

// https://material.io/design/layout/understanding-layout.html#pixel-density

// Backward compatibility, to remove in v5.

// Inject custom styles

// Inject custom props

/* 280 */

// Default CSS values

// flex: '0 1 auto',

// flexDirection: 'row',

// alignItems: 'flex-start',

// flexWrap: 'nowrap',

// justifyContent: 'flex-start',

/* Styles applied to the root element */

/* Styles applied to the root element if `container={true}`. */

/* Styles applied to the root element if `item={true}`. */

/* Styles applied to the root element if `zeroMinWidth={true}`. */

/* Styles applied to the root element if `direction="column"`. */

/* Styles applied to the root element if `direction="column-reverse"`. */

/* Styles applied to the root element if `direction="rwo-reverse"`. */

/* Styles applied to the root element if `wrap="nowrap"`. */

/* Styles applied to the root element if `wrap="reverse"`. */

/* Styles applied to the root element if `alignItems="center"`. */

/* Styles applied to the root element if `alignItems="flex-start"`. */

/* Styles applied to the root element if `alignItems="flex-end"`. */

/* Styles applied to the root element if `alignItems="baseline"`. */

/* Styles applied to the root element if `alignContent="center"`. */

/* Styles applied to the root element if `alignContent="flex-start"`. */

/* Styles applied to the root element if `alignContent="flex-end"`. */

/* Styles applied to the root element if `alignContent="space-between"`. */

/* Styles applied to the root element if `alignContent="space-around"`. */

/* Styles applied to the root element if `justify="center"`. */

/* Styles applied to the root element if `justify="flex-end"`. */

/* Styles applied to the root element if `justify="space-between"`. */

/* Styles applied to the root element if `justify="space-around"`. */

/* Styles applied to the root element if `justify="space-evenly"`. */

// Use side effect over immutability for better performance.

// Keep 7 significant numbers.

// Close to the bootstrap implementation:

// https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41

// For the auto layouting

// No need for a media query for the first size.

/* 281 */

/* 282 */

/* 283 */

/* 284 */

/* 285 */

/* 286 */

/* 287 */

/* 288 */

/* 289 */

/* 290 */

/* 291 */

/* 292 */

/* 293 */

/* 294 */

/* 295 */

/* 296 */

/* 297 */

/* 298 */

/* 299 */

/* 300 */

/* 301 */

/* 302 */

/* 303 */

/* 304 */

/* 305 */

/* 306 */

/* 307 */

/* 308 */

/* 309 */

/* 310 */

/* 311 */

/* 312 */

/* 313 */

/* 314 */

/* 315 */

/* 316 */

/* 317 */

/* 318 */

/* 319 */

/* 320 */

/* 321 */

/* 322 */

/* 323 */

/* 324 */

/* 325 */

/* 326 */

/* 327 */

/* 328 */

/* 329 */

/* 330 */

/* 331 */

/* 332 */

/* 333 */

/* 334 */

/* 335 */

/* 336 */

/* 337 */

/* 338 */

/* 339 */

/* 340 */

/* 341 */

/* 342 */

/* 343 */

/* 344 */

/* 345 */

/* 346 */

/* 347 */

/* 348 */

/* 349 */

/* 350 */

/* 351 */

/* 352 */

/* 353 */

/* 354 */

/* 355 */

/* 356 */

/* 357 */

/* 358 */

/* 359 */

/* 360 */

/* 361 */

/* 362 */

/* 363 */

/* 364 */

/* 365 */

/* 366 */

/* 367 */

/* 368 */

/* 369 */

/* 370 */

/* 371 */

/* 372 */

/* 373 */

/* 374 */

/* 375 */

/* 376 */

/* 377 */

/* 378 */

/* 379 */

/* 380 */

/* 381 */

/* 382 */

/* 383 */

/* 384 */

/* 385 */

/* 386 */

/* 387 */

/* 388 */

/* 389 */

/* 390 */

/* 391 */

/* 392 */

/* 393 */

/* 394 */

/* 395 */

/* 396 */

/* 397 */

/* 398 */

/* 399 */

/* 400 */

/* 401 */

/* 402 */

/* 403 */

/* 404 */

/* 405 */

/* 406 */

/* 407 */

/* 408 */

/* 409 */

/* 410 */

/* 411 */

/* 412 */

/* 413 */

/* 414 */

/* 415 */

/* 416 */

/* 417 */

/* 418 */

/* 419 */

/* 420 */

/* 421 */

/* 422 */

/* 423 */

/* 424 */

/* 425 */

/* 426 */

/* 427 */

/* 428 */

/* 429 */

/* 430 */

/* 431 */

/* 432 */

/* 433 */

/* 434 */

/* 435 */

/* 436 */

/* 437 */

/* 438 */

/* 439 */

/* 440 */

/* 441 */

/* 442 */

/* 443 */

/* 444 */

/* 445 */

/* 446 */

/* 447 */

/* 448 */

/* 449 */

/* 450 */

/* 451 */

/* 452 */

/* 453 */

/* 454 */

/* 455 */

/* 456 */

/* 457 */

/* 458 */

/* 459 */

/* 460 */

/* 461 */

/* 462 */

/* 463 */

/* 464 */

/* 465 */

/* 466 */

/* 467 */

/* 468 */

/* 469 */

/* 470 */

/* 471 */

/* 472 */

/* 473 */

/* 474 */

/* 475 */

/* 476 */

/* 477 */

/* 478 */

/* 479 */

/* 480 */

/* 481 */

/* 482 */

/* 483 */

/* 484 */

/* 485 */

/* 486 */

/* 487 */

/* 488 */

/* 489 */

/* 490 */

/* 491 */

/* 492 */

/* 493 */

/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 494 */

/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/* 495 */

/* 496 */

/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 497 */

/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Baobab-React Higher Order Component

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
state of the art higher order component.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * Helpers
 */

/**
 * Root component
 */

// Currying the functions so that they could be used as decorators

// Handling child context

// Render shim

/**
 * Branch component
 */

// Building initial state

// Creating the watcher

// Hydrating initial state

// On component mount

// Creating dispatcher

// On component unmount

// Releasing watcher

// On new props

// Refreshing the watcher

/* 498 */

/**
 * Baobab Watchers
 * ================
 *
 * Abstraction used to listen and retrieve data from multiple parts of a
 * Baobab tree at once.
 */

// Initializing

// Listening

/**
   * Method used to get the current watched paths.
   *
   * @return {array} - The array of watched paths.
   */

// Watcher mappings can accept a cursor

// Handling path polymorphisms

// Dynamic path?

// Facet path?

/**
     * Method used to return a map of the watcher's cursors.
     *
     * @return {object} - TMap of relevant cursors.
     */

/**
     * Method used to refresh the watcher's mapping.
     *
     * @param  {object}  mapping  - The new mapping to apply.
     * @return {Watcher}          - Itself for chaining purposes.
     */

// Creating the get method

/**
     * Methods releasing the watcher from memory.
     */

/* 499 */

/**
   * Baobab-React Custom Prop Types
   * ===============================
   *
   * PropTypes used to propagate context safely.
   */

/* 500 */

// Important!

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

/* 501 */

/* 502 */

/* 503 */

/* 504 */

// module.parent = undefined by default

/* 505 */

// This is for to force a repaint,

// which is necessary in order to transition styles when adding a class name.

/* eslint-disable no-unused-expressions */

/* eslint-enable no-unused-expressions */

/* 506 */

/* 507 */

/* 508 */

/* 509 */

/**
 * The `<ReplaceTransition>` component is a specialized `Transition` component
 * that animates between two children.
 *
 * ```jsx
 * <ReplaceTransition in>
 *   <Fade><div>I appear first</div></Fade>
 *   <Fade><div>I replace the above</div></Fade>
 * </ReplaceTransition>
 * ```
 */

/* 510 */

// item is new (entering)

// item hasn't changed transition states

// copy over the last transition props;

// console.log('unchanged', key)

// item is old (exiting)

// console.log('leaving', key)

// console.log('entering', key)

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */

// run the map function here instead so that the key is the computed one

/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */

// For each key of `next`, the list of keys to insert before that key in

// the combined list

// Finally, add the keys which didn't appear before any key in `next`

/* 511 */

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */

// Copy axios.prototype to instance

// Copy context to instance

// Create the default instance to be exported

// Expose Axios class to allow class inheritance

// Factory for creating new instances

// Expose Cancel & CancelToken

// Expose all/spread

// Allow use of default import syntax in TypeScript

/* 512 */

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/* 513 */

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */

// Allow for axios('example/url'[, config]) a la fetch API

// Hook up interceptors middleware

// Provide aliases for supported request methods

/*eslint func-names:0*/

/* 514 */

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */

/* 515 */

/**
 * Throws a `Cancel` if cancellation has been requested.
 */

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */

// Support baseURL config

// Ensure headers exist

// Transform request data

// Flatten headers

// Transform response data

/* 516 */

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */

/* 517 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 518 */

/* 519 */

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */

/* 520 */

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

// Standard

// Microsoft

// Mozilla

// Axios

/* 521 */

// Headers whose duplicates are ignored by node

// c.f. https://nodejs.org/api/http.html#http_message_headers

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

/* 522 */

// Standard browser envs have full support of the APIs needed to test

// whether the request URL is of the same origin as current location.

/**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */

// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

// IE needs attribute set twice to normalize properties

/**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */

/* 523 */

/* 524 */

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

// A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).

// RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed

// by any combination of letters, digits, plus, period, or hyphen.

/* 525 */

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

/* 526 */

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */

/* 527 */

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

/* 528 */

/* 529 */

/* 530 */

/* 531 */

/* 532 */

/* 533 */

/** @license React v16.8.5
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 534 */

// eslint-disable-line no-console

// ArrowDown

// ArrowUp

// valueBeforeUpDown can be null if, for example, user

// hovers on the first suggestion and then pressed Up.

// If that happens, use the original input value.

// Prevents the cursor from moving

// Enter

// See #388

// Escape

// If input.type === 'search', the browser clears the input

// when Escape is pressed. We want to disable this default

// behaviour so that, when suggestions are shown, we just hide

// them, without clearing the input.

// Didn't interact with Up/Down

// Interacted with Up/Down

// This is for testing only. Please show me a better way to emulate this.

// Suggestion was clicked

// Something else inside suggestions container was clicked

// Checking if this.justSelectedSuggestion is already true to not duplicate touch events in chrome

// See: https://github.com/facebook/react/issues/9809#issuecomment-413978405

// shouldResetValueBeforeUpDown

// todo: event.preventDefault when https://github.com/facebook/react/issues/2043

// todo: gets released so onSuggestionMouseDown won't fire in chrome

/* 535 */

/* 536 */

/* 537 */

// `key` is provided by theme()

/* eslint-disable react/jsx-key */

/* eslint-enable react/jsx-key */

// Top of the visible area

// Item is off the top of the visible area

// Item is off the bottom of the visible area

// Used in aria-* attributes. If multiple Autowhatever's are rendered on a page, they must have unique ids.

// Indicates whether a multi section layout should be rendered.

// When specified, it is used to render the input element.

// Renders the items container.

// Array of items or sections to render.

// This function renders a single item.

// Arbitrary data that will be passed to renderItem()

// This function gets a section and renders its title.

// This function gets a section and returns its items, which will be passed into `renderItem` for rendering.

// Arbitrary container props

// Arbitrary input props

// Arbitrary item props

// Section index of the highlighted item

// Highlighted item index (within a section)

// Styles. See: https://github.com/markdalgleish/react-themeable

/* 538 */

/* 539 */

/* 540 */

/* 541 */

/* 542 */

/* 543 */

/* 544 */

/* 545 */

/* 546 */

// Try to use displayName of wrapped component

// Expose canUseDOM so tests can monkeypatch it

/* 547 */

/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/

/* 548 */

// Test for A's keys different from B.

/* 549 */

// end fast-deep-equal

// fast-deep-equal index.js 2.0.1

// start react-fast-compare

// custom handling for DOM elements

// custom handling for React

// end react-fast-compare

// warn on circular references, don't crash

// browsers give this different errors name and messages:

// chrome/safari: "RangeError", "Maximum call stack size exceeded"

// firefox: "InternalError", too much recursion"

// edge: "Error", "Out of stack space"

// some other error. we should definitely know about these

/* 550 */

// use function arg to avoid need to escape $ characters

// Calculate list of tags, giving priority innermost component (end of the propslist)

// Special rule with link tags, since rel and href are both primary tags, rel takes priority

// Special case for innerHTML which doesn't work lowercased

// Update seen tags with tags from this instance

// Remove a duplicate tag from domTagstoRemove, so it isn't cleared.

/* 551 */

/* 552 */

// imports

// module

/* 553 */

/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

// get current location

// blank or null?

// send back the fixed css

// strip quotes (if they exist)

// already a full url? no change

//TODO: should we add protocol?

// convert the url to a full url

/* 554 */

/* 555 */

/* 556 */

/* 557 */

/* 558 */

/* 559 */

/* 560 */

/* 561 */

/* 562 */

/* 563 */

/* 564 */

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js

// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// encapsulates the subscription logic for connecting a component to the redux store, as

// well as nesting subscriptions of descendant components, so that we can ensure the

// ancestor components re-render before descendants

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/Subscription.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/connectAdvanced.js

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

// If this component received store from props, its subscription should be transparent

// to any descendants receiving store+subscription from context; it passes along

// subscription passed to it. Otherwise, it shadows the parent subscription, which allows

// Connect to control ordering of notifications to flow top-down.

// componentWillMount fires during server side rendering, but componentDidMount and

// componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.

// Otherwise, unsubscription would never take place during SSR, causing a memory leak.

// To handle the case where a child component may have triggered a state change by

// dispatching an action in its componentWillMount, we have to re-run the select and maybe

// re-render.

// wrap the selector in an object that tracks its results between runs.

// parentSub's source should match where store came from: props vs. context. A component

// connected to the store via props shouldn't use subscription from context, or vice versa.

// `notifyNestedSubs` is duplicated to handle the case where the component is  unmounted in

// the middle of the notification loop, where `this.subscription` will then be null. An

// extra null check every change can be avoided by copying the method onto `this` and then

// replacing it with a no-op on unmount. This can probably be avoided if Subscription's

// listeners logic is changed to not call listeners that have been unsubscribed in the

// middle of the notification loop.

// `componentDidUpdate` is conditionally implemented when `onStateChange` determines it

// needs to notify nested subs. Once called, it unimplements itself until further state

// changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does

// a boolean check every time avoids an extra method call most of the time, resulting

// in some perf boost.

// make a shallow copy so that fields added don't leak to the original selector.

// this is especially important for 'ref' since that's a reference back to the component

// instance. a singleton memoized selector would then be holding a reference to the

// instance, preventing the instance from being garbage collected, and that would be bad

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js

// EXTERNAL MODULE: ./node_modules/symbol-observable/es/index.js

// CONCATENATED MODULE: ./node_modules/redux/es/redux.js

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

// EXTERNAL MODULE: ./node_modules/lodash-es/_freeGlobal.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_root.js

/** Detect free variable `self`. */

// CONCATENATED MODULE: ./node_modules/lodash-es/_objectToString.js

/** Used for built-in method references. */

// CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetTag.js

/** `Object#toString` result references. */

// CONCATENATED MODULE: ./node_modules/lodash-es/_getPrototype.js

/** Built-in value references. */

// CONCATENATED MODULE: ./node_modules/lodash-es/_overArg.js

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

// CONCATENATED MODULE: ./node_modules/lodash-es/isPlainObject.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// whether mapToProps needs to be invoked when props have changed.

// 

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// therefore not reporting its length accurately..

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// this function wraps mapToProps in a proxy function which does several things:

//  * Detects whether the mapToProps function being called depends on props, which

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    

//  * On first call, handles mapToProps if returns another function, and treats that

//    new function as the true mapToProps for subsequent calls.

//  * On first call, verifies the first result is a plain object, in order to warn

//    the developer that their mapToProps function is not returning a valid result.

// allow detectFactoryAndVerify to get ownProps

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/verifySubselectors.js

// TODO: Add more comments

// If pure is true, the selector returned by selectorFactory will memoize its results,

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// props have not changed. If false, the selector will always return a new

// object and shouldComponentUpdate will always return true.

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/connect.js

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

// createConnect with default args builds the 'official' connect behavior. Calling it with

// different options opens up some testing and extensibility scenarios

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

// EXTERNAL MODULE: ./node_modules/react-transition-group/index.js

// CONCATENATED MODULE: ./src/core/components/hub.js

/*
      this.unlisten = this.props.history.listen((location, action) => {
      	console.log("on route change", location, action);
      	if(action === "PUSH"){
      		document.getElementById('root').style.display = 'none';
      		document.getElementById('root_splash').style.display = 'block'				
      	}
      });
      */

//console.log("componentDidMount");		

// CONCATENATED MODULE: ./src/core/app/server.js

// CONCATENATED MODULE: ./src/core/app/components.js

// Major, Minor, Revision

//console.log(controlsMajor, version, ver);

//console.log(controlsMinor, version, ver);

// CONCATENATED MODULE: ./src/core/app/api.js

//console.log(dataPath, uri, params);

// CONCATENATED MODULE: ./src/jmarroyave/app/api.js

// EXTERNAL MODULE: ./src/jmarroyave/components/uxi/core/app.js + 65 modules

// EXTERNAL MODULE: ./node_modules/react-loadable/lib/index.js

// CONCATENATED MODULE: ./src/jmarroyave/pages/home.js

/* import() */

/*require.resolve*/

// CONCATENATED MODULE: ./src/jmarroyave/conf/navigation.js

// EXTERNAL MODULE: ./src/jmarroyave/index.scss

// CONCATENATED MODULE: ./src/jmarroyave/index.js

// CONCATENATED MODULE: ./src/app.js

/* 565 */

/* 566 */

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 3 modules

/**
 * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).
 *
 * This component can be useful in a variety of situations:
 * - Escape hatch for broken dependencies not supporting SSR.
 * - Improve the time-to-first paint on the client by only rendering above the fold.
 * - Reduce the rendering time on the server.
 * - Under too heavy server load, you can turn on service degradation.
 */

// We need the Fragment here to force react-docgen to recognise NoSsr as a component.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/utils/focusVisible.js

// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js

/**
 * If at any point a user clicks with a pointing device, ensure that we change
 * the modality away from keyboard.
 * This avoids the situation where a user presses a key on an already focused
 * element, and then clicks on a different element, focusing it with a
 * pointing device, while we still think we're in keyboard modality.
 * @param {Event} e
 */

// browsers not implementing :focus-visible will throw a SyntaxError

// we use our own heuristic for those browsers

// rethrow might be better if it's not the expected error but do we really

// want to crash if focus-visible malfunctioned?

// no need for validFocusTarget check. the user does that by attaching it to

// focusable events only

/**
 * Should be called if a blur event is fired on a focus-visible element
 */

// To detect a tab/window switch, we look for a blur event followed

// rapidly by a visibility change.

// If we don't see a visibility change within 100ms, it's probably a

// regular focus change.

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

// EXTERNAL MODULE: ./node_modules/@material-ui/core/node_modules/react-transition-group/esm/TransitionGroupContext.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/react-transition-group/esm/utils/ChildMapping.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/node_modules/react-transition-group/esm/TransitionGroup.js

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/ButtonBase/Ripple.js

// Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority

// react-transition-group#onExit

// react-transition-group#onExited

// Used to filter out mouse emulated events on mobile.

// We use a timer in order to only show the ripples for touch "click" like events.

// We don't want to display the ripple for touch scroll events.

// For some reason the animation is broken on Mobile Chrome if the size if even.

// Touche devices

// Prepare the ripple effect.

// Delay the execution of the ripple effect.

// The touch interaction occurs too quickly.

// We still want to show ripple effect.

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/ButtonBase/TouchRipple.js

/* Styles applied to the internal `Ripple` components `ripple` class. */

/* Styles applied to the internal `Ripple` components `rippleVisible` class. */

/* Styles applied to the internal `Ripple` components `ripplePulsate` class. */

/* Styles applied to the internal `Ripple` components `child` class. */

/* Styles applied to the internal `Ripple` components `childLeaving` class. */

/* Styles applied to the internal `Ripple` components `childPulsate` class. */

// Fix for https://github.com/facebook/react/issues/7769

// Check if key is already down to avoid repeats being counted as multiple activations

// Keyboard accessibility for non interactive elements

// CONCATENATED MODULE: ./node_modules/@material-ui/core/esm/ButtonBase/ButtonBase.js

// Reset default value

// Remove the margin in Safari

// Remove the padding in Firefox

// So we take precedent over the style of a native <a /> element.

// Disable link interactions

/* Pseudo-class applied to the root element if keyboard focused. */

/* 567 */

/* 568 */

/* 569 */

/* 570 */

/* 571 */

/* 572 */

/* 573 */

/* 574 */

/* 575 */

/* 576 */

/* 577 */

/* 578 */

/* 579 */

/* 580 */

/* 581 */

/* 582 */

/* 583 */

/* 584 */

/* 585 */

/* 586 */

/* 587 */

/* 588 */

/* 589 */

/* 590 */

/* 591 */

/* 592 */

/* 593 */

/* 594 */

/* 595 */

/* 596 */

/* 597 */

/* 598 */

/* 599 */

/* 600 */

/* 601 */

/* 602 */

/* 603 */

/* 604 */

/* 605 */

/* 606 */

/* 607 */

/* 608 */

/* 609 */

/* 610 */

/* 611 */

/* 612 */

/* 613 */

/* eslint-disable no-restricted-syntax */

// Resolve default props, code borrow from React source.

// https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221

/* 614 */

/* Styles applied to the root element if `square={false}`. */

/* 615 */

/* Styles applied to the root element if `disablePadding={false}`. */

/* Styles applied to the root element if a `subheader` is provided. */

/* 616 */

/* Styles applied to the inner `component` element if `disableGutters={false}`. */

/* Styles applied to the root element if `inset={true}`. */

/* Styles applied to the root element if `disableSticky={false}`. */

/* 617 */

// Use div by default.

// Avoid nesting of li > li.

/* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */

/* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */

/* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */

/* Styles applied to the `component` element if dense. */

/* Styles applied to the `component` element if `alignItems="flex-start"`. */

/* Pseudo-class applied to the inner `component` element if `disabled={true}`. */

/* Styles applied to the inner `component` element if `divider={true}`. */

/* Styles applied to the inner `component` element if `button={true}`. */

/* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */

// Add some space to avoid collision as `ListItemSecondaryAction`

// is absolutely positioned.

/* Pseudo-class applied to the root element if `selected={true}`. */

/* 618 */

/* Styles applied to the `Typography` components if primary and secondary are set. */

/* Styles applied to the `Typography` components if dense. */

/* Styles applied to the primary `Typography` component. */

/* Styles applied to the secondary `Typography` component. */

/* 619 */

// EXTERNAL MODULE: ./node_modules/@material-ui/styles/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js + 1 modules

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

/**
 * Create a rule instance.
 */

// It is an at-rule and it has no instance.

/**
 * Converts array values to string.
 *
 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
 * `border: ['1px', '2px']` > `border: 1px, 2px;`
 * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
 * `color: ['red', !important]` > `color: red !important;`
 */

// Support space separated values via `[['5px', '10px']]`.

// Add !important, because it was ignored.

/**
 * Indent a string.
 * http://jsperf.com/array-join-vs-for
 */

/**
 * Converts a Rule to CSS string.
 */

// Apply fallbacks first.

// Array syntax {fallbacks: [{prop: value}]}

// Object syntax {fallbacks: {prop: value}}

// Allow empty style in this case, because properties will be added dynamically.

// When rule is being stringified before selector was defined.

/**
   * Get or set a style property.
   */

// It's a getter.

// Don't do anything if the value has not changed.

// Value is empty and wasn't defined before.

// We are going to remove this value.

// Renderable is defined if StyleSheet option `link` is true.

/**
   * Set selector string.
   * Attention: use this with caution. Most browsers didn't implement
   * selectorText setter, so this may result in rerendering of entire Style Sheet.
   */

/**
   * Apply rule to an element inline.
   */

/**
   * Returns JSON representation of the rule.
   * Fallbacks are not supported.
   * Useful for inline styles.
   */

/**
   * Generates a CSS string.
   */

// If selector setter is not implemented, rerender the rule.

/**
     * Get selector string.
     */

/**
   * Get a rule.
   */

/**
   * Get index of a rule.
   */

/**
   * Create and register rule, run plugins.
   */

// Animation name ref replacer.

// eslint-disable-next-line no-unused-vars

/**
   * Contains rules objects and allows adding/removing etc.
   * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
   */

// Rules registry for access by .get() method.

// It contains the same rule registered by name and by selector.

// Original styles object.

// Used to ensure correct rules order.

/**
   * Create and register rule.
   *
   * Will not render after Style Sheet was rendered the first time.
   */

// We need to save the original decl before creating the rule

// because cache plugin needs to use it as a key to return a cached rule.

// For e.g. rules inside of @media container

/**
   * Delete a rule.
   */

/**
   * Run `onProcessRule()` plugins on every rule.
   */

// We need to clone array because if we modify the index somewhere else during a loop

// we end up with very hard-to-track-down side effects.

/**
   * Register a rule in `.map` and `.classes` maps.
   */

/**
   * Unregister a rule.
   */

/**
   * Update the function values with a new data.
   */

// $FlowFixMe

/**
   * Execute plugins, update rule props.
   */

// It is a rules container like for e.g. ConditionalRule.

// We rely on a new `style` ref in case it was mutated during onUpdate hook.

// Update and add props.

// We need to run the plugins in case new `style` relies on syntax plugins.

// We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.

// We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

// Remove props.

/**
   * Convert rules to a CSS string.
   */

// No need to render an empty rule.

/**
   * Attach renderable to the render tree.
   */

// Order is important, because we can't use insertRule API if style element is not attached.

/**
   * Remove renderable from render tree.
   */

/**
   * Add a rule to the current stylesheet.
   * Will insert a rule also after the stylesheet has been rendered first time.
   */

// Plugins can create rules.

// In order to preserve the right order, we need to queue all `.addRule` calls,

// which happen after the first `rules.add()` call.

// Don't insert rule directly if there is no stringified version yet.

// It will be inserted all together when .attach is called.

// We can't add rules to a detached style node.

// We will redeploy the sheet once user will attach it.

/**
   * Insert rule into the StyleSheet
   */

/**
   * Create and add rules.
   * Will render also after Style Sheet was rendered the first time.
   */

/**
   * Get a rule by name.
   */

/**
   * Delete a rule by name.
   * Returns `true`: if rule has been deleted from the DOM.
   */

/**
   * Deploy pure CSS string to a renderable.
   */

/**
   * Call `onCreateRule` hooks and return an object if returned by a hook.
   */

/**
   * Call `onProcessRule` hooks.
   */

/**
   * Call `onProcessStyle` hooks.
   */

/**
   * Call `onProcessSheet` hooks.
   */

/**
   * Call `onUpdate` hooks.
   */

/**
   * Call `onChangeValue` hooks.
   */

/**
   * Register a plugin.
   */

// Avoids applying same plugin twice, at least based on ref.

/**
   * Register a Style Sheet.
   */

// Find a position.

/**
   * Reset the registry.
   */

/**
   * Remove a Style Sheet.
   */

/**
   * Convert all attached sheets to a CSS string.
   */

/**
     * Current highest index number.
     */

// Bundle may contain multiple JSS versions at the same time. In order to identify

// the current version with just one short number and use it for classes generation

// we use a counter. Also it is more accurate, because user can manually reevaluate

// the module.

/**
 * Get a style property value.
 */

// Support CSSTOM.

// IE may throw if property is unknown.

/**
 * Set a style property.
 */

/**
 * Remove a style property.
 */

/**
 * Set the selector.
 */

// Return false if setter was not successful.

// Currently works in chrome only.

/**
 * Gets the `head` element upon the first call and caches it.
 * We assume it can't be null.
 */

/**
 * Find attached sheet with an index higher than the passed one.
 */

/**
 * Find a node before which we can insert the sheet.
 */

// Try to insert before the next higher sheet.

/**
 * Find attached sheet with the highest index.
 */

// Otherwise insert after the last attached.

/**
 * Find a comment with "jss" inside.
 */

// Try to find a comment placeholder if registry is empty.

// If user specifies an insertion point and it can't be found in the document -

// bad specificity issues may appear.

/**
 * Insert style element into the DOM.
 */

/**
 * Read jss nonce setting from the page if the user has set it.
 */

// In case previous insertion fails, passed index might be wrong

// Without it, IE will have a broken source order specificity if we

// insert rules after we insert the style tag.

// It seems to kick-off the source order specificity algorithm.

// HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696

// There is no sheet when the renderer is used from a standalone StyleRule.

/**
   * Insert style element into render tree.
   */

// In the case the element node is external and it is already in the DOM.

// Works with iframes and any node types.

// https://stackoverflow.com/questions/41328728/force-casting-in-flow

// When rules are inserted using `insertRule` API, after `sheet.detach().attach()`

// browsers remove those rules.

// TODO figure out if its a bug and if it is known.

// Workaround is to redeploy the sheet.

/**
   * Remove style element from render tree.
   */

/**
   * Inject CSS string into element.
   */

/**
   * Insert RuleList into an element.
   */

/**
   * Insert a rule into element.
   */

// We need to render the container without children first.

/**
   * Get index of a CSS Rule.
   */

/**
   * Generate a new CSS rule and replace the existing one.
   *
   * Only used for some old browsers because they can't set a selector.
   */

/**
   * Get all rules elements.
   */

/**
   * Prepares various options, applies plugins.
   * Should not be used twice on the same instance, because there is no plugins
   * deduplication logic.
   */

// eslint-disable-next-line prefer-spread

/**
   * Create a Style Sheet.
   */

/**
   * Detach the Style Sheet and remove it from the registry.
   */

/**
   * Create a rule without a Style Sheet.
   */

// Enable rule without name for inline styles.

/**
   * Register plugin. Passed function will be invoked with a rule instance.
   */

/**
 * SheetsManager is like a WeakMap which is designed to count StyleSheet
 * instances and attach/detach automatically.
 */

/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */

/**
 * Export a constant indicating if this browser has CSSTOM support.
 * https://developers.google.com/web/updates/2018/03/cssom
 */

// CONCATENATED MODULE: ./node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.esm.js

// We need to extract function values from the declaration, so that we can keep core unaware of them.

// We need to do that only once.

// We don't need to extract functions on each style update, since this can happen only once.

// We don't support function values inside of function rules.

// If we have a style function, the entire rule is dynamic and style object

// will be returned from that function.

// Empty object will remove all currently defined props

// in case function rule returns a falsy value.

// If we have a fn values map, it is a rule with function values.

// CONCATENATED MODULE: ./node_modules/jss-plugin-global/dist/jss-plugin-global.esm.js

/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */

// CONCATENATED MODULE: ./node_modules/jss-plugin-nested/dist/jss-plugin-nested.esm.js

// Get a function to be used for $ref replacement.

// Replace all & by the parent or prefix & with the parent.

// Options has been already created, now we only increase index.

// Lazily create the ref replacer function just once for

// all nested rules within the sheet.

// Replace all $refs.

// Place conditional right after the parent rule to ensure right ordering.

// CONCATENATED MODULE: ./node_modules/hyphenate-style-name/index.js

/* eslint-disable no-var, prefer-template */

// CONCATENATED MODULE: ./node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.esm.js

/**
 * Convert camel cased property names to dash separated.
 *
 * @param {Object} style
 * @return {Object}
 */

/**
 * Allow camel cased property names by converting them back to dasherized.
 *
 * @param {Rule} rule
 */

// Handle rules like @font-face, which can have multiple styles in an array

// There was no camel case in place

// CONCATENATED MODULE: ./node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.esm.js

/**
 * Clones the object and adds a camel cased property version.
 */

// Animation properties

// Background properties

// Border Properties

// Margin properties

// Padding properties

// Mask properties

// Width and height properties

// Position properties

// Shadow properties

// Column properties

// Font and text properties

// Motion properties

// Outline properties

// Perspective properties

// Transform properties

// Transition properties

// Alignment properties

// Some random properties

// Grid properties

// Not existing properties.

// Used to avoid issues with jss-plugin-expand integration.

/**
 * Recursive deep style passing function
 */

/**
 * Add unit to numeric values.
 */

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js

// CONCATENATED MODULE: ./node_modules/css-vendor/dist/css-vendor.esm.js

// Export javascript style and css style vendor prefixes.

// We should not do anything if required serverside.

// Order matters. We need to check Webkit the last one because

// other vendors use to add Webkit prefixes to some properties

// Correctly detect the Edge browser.

// Correctly detect the Safari browser.

/**
 * Vendor prefix string for the current browser.
 *
 * @type {{js: String, css: String, vendor: String, browser: String}}
 * @api public
 */

/**
 * Test if a keyframe at-rule should be prefixed or not
 *
 * @param {String} vendor prefix string for the current browser.
 * @return {String}
 * @api public
 */

// https://caniuse.com/#search=appearance

/**
 * Replaces the letter with the capital letter
 *
 * @param {String} match
 * @param {String} c
 * @return {String}
 * @api private
 */

/**
 * Convert dash separated strings to camel-cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

/**
 * Convert dash separated strings to pascal cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

// https://caniuse.com/#search=multicolumn

// https://github.com/postcss/autoprefixer/issues/491

// https://github.com/postcss/autoprefixer/issues/177

// Return custom CSS variable without prefixing.

// Return already prefixed value without prefixing.

// Try webkit fallback.

// https://caniuse.com/#search=color-adjust

// We test every property on vendor prefix requirement.

// Once tested, result is cached. It gives us up to 70% perf boost.

// http://jsperf.com/element-style-object-access-vs-plain-object

// Prefill cache with known css properties to reduce amount of

// properties we need to feature test at runtime.

// http://davidwalsh.name/vendor-prefix

// eslint-disable-next-line no-restricted-globals

// Properties that cannot be correctly detected using the

// cache prefill method.

/**
 * Test if a property is supported, returns supported property with vendor
 * prefix if required. Returns `false` if not supported.
 *
 * @param {String} prop dash separated
 * @param {Object} [options]
 * @return {String|Boolean}
 * @api public
 */

// For server-side rendering.

// Remove cache for benchmark tests or return property from the cache.

// Check if 'transition' or 'transform' natively supported in browser.

// Find a plugin for current prefix property.

// Reset styles for current property.

// Firefox can even throw an error for invalid properties, e.g., "0".

/**
 * Returns prefixed value transition/transform if needed.
 *
 * @param {String} match
 * @param {String} p1
 * @param {String} p2
 * @return {String}
 * @api private
 */

/**
 * Returns prefixed value if needed. Returns `false` if value is not supported.
 *
 * @param {String} property
 * @param {String} value
 * @return {String|Boolean}
 * @api public
 */

// It is a string or a number as a string like '1'.

// We want only prefixable values here.

// Create cache key for current value.

// Remove cache for benchmark tests or return value from cache.

// IE can even throw an error in some cases, for e.g. style.content = 'bar'.

// Test value as it is.

// Return false if value not supported.

// If 'transition' or 'transition-property' property.

// Value with a vendor prefix.

// Hardcode test to convert "flex" to "-ms-flexbox" for IE10.

// Test prefixed value.

// Write current value to cache.

// CONCATENATED MODULE: ./node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.esm.js

/**
 * Add vendor prefix to a property name when needed.
 *
 * @api public
 */

// Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'

// No need to prefix IE/Edge. Older browsers will ignore unsupported rules.

// https://caniuse.com/#search=keyframes

// CONCATENATED MODULE: ./node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.esm.js

/**
 * Sort props by length.
 */

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/jssPreset/jssPreset.js

// Subset of jss-preset-default with only the plugins the Material-UI components are using.

// Disable the vendor prefixer server-side, it does nothing.

// This way, we can get a performance boost.

// In the documentation, we are using `autoprefixer` to solve this problem.

// Returns a function which generates unique class names based on counters.

// When new generator function is created, rule counter is reset.

// We need to reset the rule counter for SSR for each request.

// It's inspired by

// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js

// Is a global static MUI style?

// We can use a shorthand class name, we never use the keys to style the components.

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/StylesProvider/StylesProvider.js

// Default JSS instance.

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/makeStyles/indexCounter.js

/* eslint-disable import/prefer-default-export */

// Global index counter to preserve source order.

// We create the style sheet during at the creation of the component,

// children are handled after the parents, so the order of style elements would be parent->child.

// It is a problem though when a parent passes a className

// which needs to override any child's styles.

// StyleSheet of the child has a higher specificity, because of the source order.

// So our solution is to render sheets them in the reverse order child->sheet, so

// that parent has a higher specificity.

// EXTERNAL MODULE: ./node_modules/deepmerge/dist/cjs.js

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/getStylesCreator/getStylesCreator.js

// Support for the jss-expand plugin.

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/getStylesCreator/noopTheme.js

// We use the same empty object to ref count the styles that don't need a theme object.

// CONCATENATED MODULE: ./node_modules/@material-ui/styles/esm/makeStyles/makeStyles.js

// Cache for the finalized classes value.

// Cache for the last used classes prop pointer.

// Cache for the last used rendered classes pointer.

// Tracks if either the rendered classes or classes prop has changed,

// requiring the generation of a new finalized classes object.

/**
 * Extracts a styles object with only props that contain function values.
 */

// "the first render", or "memo dropped the value"
