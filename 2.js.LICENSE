/***/

/* WEBPACK VAR INJECTION */

// This is done to register the method called with moment()

// without creating circular dependencies.

// IE8 will treat undefined and null as object if it wasn't for

// input != null

// Plugins that add properties should also add the key here (null value),

// so we can properly clone ourselves.

// Moment prototype object

// Prevent infinite loop in case updateOffset creates new moment

// objects.

// compare two arrays, return the number of differences

// make sure changes to properties don't modify parent config

// token:    'M'

// padded:   ['MM', 2]

// ordinal:  'Mo'

// callback: function () { this.month() + 1 }

// format date using native date object

//       0 - 9

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript

// HELPERS

// HOOKS

// FORMATTING

// ALIASES

// PRIORITIES

// PARSING

// MOMENTS

// I know

// PRIORITY

// if we didn't find a month name, mark the date as invalid.

// LOCALES

// No op

// TODO: Another silent failure?

// make the regex if we don't have it already

// Sorting makes sure if one month (or abbr) is a prefix of another it

// will match the longer piece.

// the Date.UTC function remaps years 0-99 to 1900-1999

// preserve leap years using a full 400 year cycle, then reset

// start-of-first-week - start-of-year

// first-week day -- which january is always in the first week (4 for iso, 1 for other)

// first-week day local weekday -- which local weekday is fwd

// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday

// if we didn't get a weekday name, mark the date as invalid

// Sorting makes sure if one weekday (or abbr) is a prefix of another it

// Setting the hour should keep the time, because the user explicitly

// specified which hour they want. So trying to maintain the same hour (in

// a new timezone) makes sense. Adding/subtracting hours does not follow

// this rule.

// Sunday is the first day of the week.

// pick the locale from the array

// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each

// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root

// TODO: Find a better way to register and load all the locales in Node

// This function will load locale and then set the global locale.  If

// no arguments are passed in, it will simply return the current global

// locale key.

// moment.duration._locale = moment._locale = data;

//warn user if arguments are passed but the locale could not be set

// backwards compat for now: also set the locale

// make sure we set the locale AFTER all child locales have been

// created, so we won't end up with the child locale set.

// useful for testing

// returns locale data

//short-circuit everything else

//the next array item is better than a shallower substring of this one

// Pick the first defined of two or three arguments.

// convert an array to a date.

// the array should mirror the parameters below

// note: all values past the year are optional and will default to the lowest possible value.

// [year, month, day , hour, minute, second, millisecond]

// Default to current date.

// * if no year, month, day of month are given, default to today

// * if day of month is given, default month and year

// * if month is given, default only year

// * if year is given, don't default anything

// hooks is actually the exported moment object

//compute day of the year from weeks and weekdays

// TODO: We need to take the current isoWeekYear, but that depends on

// how we interpret now (local, utc, fixed offset). So create

// a now version of current config (take local/utc/offset flags, and

// create now).

// Default to current week.

// weekday -- low day numbers are considered next week

// local weekday -- counting starts from beginning of week

// default to beginning of week

// iso 8601 regex

// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)

//if the day of the year is set, figure out what it is

// Zero out whatever was not defaulted, including time

// Check for 24:00:00.000

// can't just apply() to create a date:

// https://stackoverflow.com/q/181348

// the date constructor remaps years 0-99 to 1900-1999

// Apply timezone offset from input. The actual utcOffset can be changed

// with parseZone.

// check for mismatching day of week

// YYYYMM is NOT allowed by the standard

// date from iso format

// match[2] should be 'T' or space

// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3

// date and time from ref 2822 format

// TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.

// the only allowed military tz is Z

// date from iso format or fallback

// date from string and format string

// TODO: Move this to another part of the creation flow to prevent circular deps

// This array is used to make a Date, either with `new Date` or `Date.UTC`

// console.log('token', token, 'parsedInput', parsedInput,

//         'regex', getParseRegexForToken(token, config));

// don't parse if it's not a known token

// add remaining unparsed input length to the string

// clear _12h flag if hour is <= 12

// handle meridiem

// Fallback

// date from string and array of format strings

// if there is any input that was not parsed add a penalty for that format

//or tokens

// Final attempt, use Input Fallback

// from milliseconds

// object construction must be done this way.

// https://github.com/moment/moment/issues/1423

// Adding is smart enough around DST

// constant that refers to the ISO standard

// constant that refers to the RFC 2822 form

// Pick a moment m from moments so that m[fn](other) is true for all

// other. This relies on the function fn to be transitive.

//

// moments should either be an array of moment objects or an array, whose

// first element is an array of moment objects.

// TODO: Use [].sort instead?

// only allow non-integers for smallest unit

// representation for dateAddRemove

// 1000

// 1000 * 60

//using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978

// Because of dateAddRemove treats 24 hours as different from a

// day when working around DST, we need to store them separately

// It is impossible to translate months into days without knowing

// which months you are are talking about, so we have to store

// it separately.

// timezone chunker

// '+10:00' > ['10',  '00']

// '-1530'  > ['-15', '30']

// Return a moment from input, that is local/utc/zone equivalent to model.

// Use low-level api, because this fn is low-level api.

// On Firefox.24 Date#getTimezoneOffset returns a floating point.

// https://github.com/moment/moment/pull/1871

// This function will be called whenever a moment is mutated.

// It is intended to keep the offset in sync with the timezone.

// ASP.NET json date format regex

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html

// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere

// and further modified to allow for strings containing both week and day

// matching against regexp is expensive, do it on demand

// checks for null or undefined

// We'd normally use ~~inp for this, but unfortunately it also

// converts floats to ints.

// inp may be undefined, so careful calling replace on it.

// apply sign while we're at it

// TODO: remove 'name' arg after deprecation is removed

//invert the arguments, but complain about it

// difference in months

// b is in (anchor - 1 month, anchor + 1 month)

//check for negative zero, return zero if negative zero

// linear across the month

// If passed a locale key, it will set the locale for this

// instance.  Otherwise, it will return the locale configuration

// variables for this instance.

// actual modulo - handles negative numbers (for dates before 1970):

// Date.UTC remaps years 0-99 to 1900-1999

// TODO: Remove "ordinalParse" fallback in next major release.

// We want to compare the start of today, vs this.

// Getting start-of-today depends on whether we're local/utc/offset or not.

// 1000 * 60 * 60

// 1000 * 60 * 60 * 24, negate dst

// 1000 * 60 * 60 * 24 * 7, negate dst

// native implementation is ~50x faster, use it when we can

/**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */

// new Date(NaN).toJSON() === null

// behaves the same as moment#day except

// as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)

// as a setter, sunday should belong to the previous week.

// keepLocalTime = true means only change the timezone, without

// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->

// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset

// +0200, so we adjust the time as needed, to be valid.

// Keeping the time actually adds/subtracts (one hour)

// from the actual represented time. That is why we call updateOffset

// a second time. In case it wants us to change the offset again

// _changeInProgress == true case, then we have to adjust, because

// there is no such time in the given timezone.

// ()

// (5)

// (fmt, 5)

// (fmt)

// (true)

// (true, 5)

// (true, fmt, 5)

// (true, fmt)

// Lenient ordinal parsing accepts just a number in addition to

// number + (possibly) stuff coming from _dayOfMonthOrdinalParse.

// this is not used

// TODO: add sorting

// Sorting makes sure if one month (or abbr) is a prefix of another

// see sorting in computeMonthsParse

// test the regex

// IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays

// Using charAt should be more compatible.

// Side effect imports

// supports only 2.0-style add(1, 's') or add(duration)

// 400 years have 146097 days (taking into account leap year rules)

// 400 years have 12 months === 4800

// the reverse of daysToMonths

// a few seconds to seconds

// seconds to minute

// minutes to hour

// hours to day

// days to month

// for ISO strings we do not use the normal bubbling rules:

//  * milliseconds bubble up until they become hours

//  * days do not bubble at all

//  * months bubble up until they become years

// This is because there is no context-free conversion between hours and days

// (think of clock changes)

// and also not between days and months (28-31 days per month)

// 3600 seconds -> 60 minutes -> 1 hour

// inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

// this is the same as C#'s (Noda) and python (isodate)...

// but not other JS (goog.date)

// supports only 2.0-style subtract(1, 's') or subtract(duration)

// handle milliseconds separately because of floating point math errors (issue #1867)

// Math.floor prevents floating point math errors here

// TODO: Use this.as('ms')?

// if we have a mix of positive and negative values, bubble down first

// check: https://github.com/moment/moment/issues/2166

// The following code bubbles up values, see the tests for

// examples of what that means.

// convert days to months

// 12 months -> 1 year

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

// This function allows you to set the rounding function for relative time strings

// MERGE

// pass null for config to unupdate, useful for tests

// This function allows you to set a threshold for relative time strings

// currently HTML5 input type only supports 24-hour formats

// <input type="datetime-local" />

// <input type="datetime-local" step="1" />

// <input type="datetime-local" step="0.001" />

// <input type="date" />

// <input type="time" />

// <input type="time" step="1" />

// <input type="time" step="0.001" />

// <input type="week" />

// return list of slides that need to be present

// startIndex that needs to be present

// get width of an element

// whether or not we can go next

// given an object and a list of keys, return new object with given keys

// get initialized state

// spec also contains listRef, trackRef

// Click on dots

// Click on the slides

// spec also contains, trackRef and slideIndex

// Adjust the track back to it's original position.

// Fallback for IE8

// useCSS is true by default so it can be undefined

// bring active slide to the beginning of visual area

// if next scroll doesn't have enough children, just reach till the end of original slides instead of shifting slidesToScroll children

// shift current slide to center of the frame

// returns no of slides on the right of active slide

// returns no of slides on the left of active slide

/**
 * Helper function for determining whether target object is a function
 *
 * @param target the object under test
 * @return {Boolean} true if function, false otherwise
 */

/**
 * Helper function for determining whether target object is an array
 *
 * @param target the object under test
 * @return {Boolean} true if array, false otherwise
 */

/**
 * Helper function for iterating over a collection
 *
 * @param collection
 * @param fn
 */

// Thanks to Joris Röling : https://github.com/jjupiter

// Maandag is die eerste dag van die week.

// Saturday is the first day of the week.

// Monday is the first day of the week.

// special case for zero

// a few seconds / in a few seconds / a few seconds ago

// 9 seconds / in 9 seconds / 9 seconds ago

// a minute / in a minute / a minute ago

// 9 minutes / in 9 minutes / 9 minutes ago

// an hour / in an hour / an hour ago

// 9 hours / in 9 hours / 9 hours ago

// a day / in a day / a day ago

// 9 days / in 9 days / 9 days ago

// a month / in a month / a month ago

// 9 months / in 9 months / 9 months ago

// a year / in a year / a year ago

// 9 years / in 9 years / 9 years ago

// NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.

// Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.

// time formats are the same as en-gb

// traditional ordinal numbers above 31 are not commonly used in colloquial Welsh

// 1af to 10fed

//ne 'diurno', ĉar estas uzita por proksimumo

// TODO: Return 'e' when day of month > 1. Move this case inside

// block for masculine words below.

// See https://github.com/moment/moment/issues/3375

// Words with masculine grammatical gender: mois, trimestre, jour

// Words with feminine grammatical gender: semaine

// the ordinal 'er' only applies to day of the month

// Gujarati notation for meridiems are quite fuzzy in practice. While there exists

// a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.

// Hindi notation for meridiems are quite fuzzy in practice. While there exists

// a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.

/**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */

// Negative Number --> always true

// Only 1 digit

// 2 digits

// 3 or 4 digits --> recursively check first digit

// Anything larger than 4 digits: recursively check first n-3 digits

// Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule

/**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */

//Different grammatical cases

// There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.

// Punjabi notation for meridiems are quite fuzzy in practice. While there exists

// a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.

// Saturday + Sunday

// Monday - Friday

// http://new.gramota.ru/spravka/rules/139-prop : § 103

// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637

// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753

// по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?

// полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки

// копия предыдущего

// полные названия с падежами

// Выражение, которое соотвествует только сокращённым формам

/*jshint -W100*/

// refer http://ta.wikipedia.org/s/1er1

// yes, three characters difference

// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.

// This is currently too difficult (maybe even impossible) to add.

// GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效

// M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason

/* unused harmony export defaultProps */

/* unused harmony export Facebook */

/* unused harmony export Instagram */

/* unused harmony export Code */

/* unused harmony export List */

/* unused harmony export BulletList */

/* harmony import */

/* harmony default export */

/*#__PURE__*/

// javascript handler for  css media query

// handles responsive breakpoints

// performance monitoring

//if (process.env.NODE_ENV !== 'production') {

//const { whyDidYouUpdate } = require('why-did-you-update')

//whyDidYouUpdate(React)

//}

// sort them in increasing order of their numerical value

// media query for each breakpoint

// when not using server side rendering

// Register media query for full screen. Need to support resize from small to large

// convert javascript object to media query string

// force scrolling by one if centerMode is on

// force showing one slide and scrolling by one if the fade mode is on

// makes sure that children is an array, even when there is only 1 child

// Children may contain false or null, so we should filter them

// children may also contain string filled with spaces (in certain cases where we use jsx strings)

// rows and slidesPerRow logic is handled here

// don't set trackStyle hence don't break animation

// To support server-side rendering

// if (this.props.onLazyLoad) {

//   this.props.onLazyLoad([leftMostSlide])

// }

// animating state should be cleared while resizing, otherwise autoplay stops working

// this and fellow methods are wrapped in setTimeout

// to make sure initialize setState has happened before

// any of such methods are called

// pauseType  is 'hovered'

// used by swipeEvent. differentites between touch and swipe.

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */

/** Used as references for various `Number` constants. */

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */

// Either this is the first call, activity has stopped and we're at the

// trailing edge, the system time has gone backwards and we're treating

// it as the trailing edge, or we've hit the `maxWait` limit.

// Restart the timer.

// Only invoke if we have `lastArgs` which means `func` has been

// debounced at least once.

// Invoke the leading edge.

// Reset any `maxWait` timer.

// Start the timer for the trailing edge.

// Handle invocations in a tight loop.

// given specifications/props for a slide, fetch all the classes that need to be applied to the slide

// in case of lazyLoad, whether or not we want to fetch the slide

// if slide needs to be precloned or postcloned

// push a cloned element of the desired slide

// In Autoplay the focus stays on clicked button even after transition

// to next slide. That only goes away by click somewhere outside

/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */

/* eslint-disable require-jsdoc, valid-jsdoc */

/**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */

/** @class */

/**
             * @returns {boolean}
             */

/**
         * @param {*} key
         * @returns {*}
         */

/**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */

/**
         * @param {*} key
         * @returns {void}
         */

/**
         * @returns {void}
         */

/**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */

/**
 * Detects whether window and document objects are available in current environment.
 */

// Minimum delay before invoking the update of observers.

/**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */

/**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */

/**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */

/**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */

/**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */

/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */

/**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */

/**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */

/**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */

// Reject immediately following calls.

// Schedule new call to be in invoked when the pending one is resolved.

// This is important for "transitions" which never actually start

// immediately so there is a chance that we might miss one if change

// happens amids the pending invocation.

/**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */

// Add listeners if they haven't been added yet.

/**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */

// Remove observer if it's present in registry.

// Remove listeners if controller has no connected observers.

/**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */

// Continue running updates if changes have been detected as there might

// be future ones caused by CSS transitions.

/**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */

// Collect observers that have active observations.

// Deliver notifications in a separate cycle in order to avoid any

// collisions between observers, e.g. when multiple instances of

// ResizeObserver are tracking the same element and the callback of one

// of them changes content dimensions of the observed target. Sometimes

// this may result in notifications being blocked for the rest of observers.

/**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */

// Do nothing if running in a non-browser environment or if listeners

// have been already added.

// Subscription to the "Transitionend" event is used as a workaround for

// delayed transitions. This way it's possible to capture at least the

// final state of an element.

/**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */

// have been already removed.

/**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */

// Detect whether transition may affect dimensions of an element.

/**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */

/**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */

// Return the local global object if it's not possible extract one from

// provided element.

// A list of substrings of CSS properties used to find transition events that

// might affect dimensions of observed elements.

/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */

/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */

/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */

/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */

// Client width & height properties can't be

// used exclusively as they provide rounded values.

// By this condition we can catch all non-replaced inline, hidden and

// detached elements. Though elements with width & height properties less

// than 0.5 will be discarded as well.

// Without it we would need to implement separate methods for each of

// those cases and it's not possible to perform a precise and performance

// effective test for hidden elements. E.g. even jQuery's ':visible' filter

// gives wrong results for elements with width & height less than 0.5.

/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */

// Following steps can't be applied to the document's root element as its

// client[Width/Height] properties represent viewport area of the window.

// Besides, it's as well not necessary as the <html> itself neither has

// rendered scroll bars nor it can be clipped.

// Width & height include paddings and borders when the 'border-box' box

// model is applied (except for IE).

// Following conditions are required to handle Internet Explorer which

// doesn't include paddings and borders to computed CSS dimensions.

// We can say that if CSS dimensions + paddings are equal to the "client"

// properties then it's either IE, and thus we don't need to subtract

// anything, or an element merely doesn't have paddings/borders styles.

/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */

/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */

// In some browsers (only in Firefox, actually) CSS width & height

// include scroll bars size which can be removed at this step as scroll

// bars are the only difference between rounded dimensions + paddings

// and "client" properties, though that is not always true in Chrome.

// Chrome has a rather weird rounding of "client" properties.

// E.g. for an element with content width of 314.2px it sometimes gives

// the client width of 315px and for the width of 314.7px it may give

// 314px. And it doesn't happen all the time. So just ignore this delta

// as a non-relevant.

/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */

// Some browsers, namely IE and Edge, don't have the SVGGraphicsElement

// interface.

/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */

/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */

/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */

/**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */

/**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */

/**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */

/**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */

/**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */

/**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */

/**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */

// Rectangle's properties are not writable and non-enumerable.

// According to the specification following properties are not writable

// and are also not enumerable in the native implementation.

// Property accessors are not being used as they'd require to define a

// private WeakMap storage which may cause memory leaks in browsers that

// don't support this type of collections.

/**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */

/**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */

/**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */

/**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */

// Do nothing if current environment doesn't have the Element interface.

// Do nothing if element is already being observed.

// Force the update of observations.

/**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */

// Do nothing if element is not being observed.

/**
     * Stops observing all elements.
     *
     * @returns {void}
     */

/**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */

/**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */

// Do nothing if observer doesn't have active observations.

// Create ResizeObserverEntry instance for every active observation.

/**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */

/**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */

/**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */

// Expose public methods of ResizeObserver.

// Export existing implementation if available.

// Add px to dimension features

// Handling array of media queries

/**
 * Allows for registration of query handlers.
 * Manages the query handler's state and is responsible for wiring up browser events
 *
 * @constructor
 */

/**
     * Registers a handler for the given media query
     *
     * @param {string} q the media query
     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers
     * @param {function} options.match fired when query matched
     * @param {function} [options.unmatch] fired when a query is no longer matched
     * @param {function} [options.setup] fired when handler first triggered
     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched
     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers
     */

//normalise to object in an array

/**
     * unregisters a query and all it's handlers, or a specific handler for a query
     *
     * @param {string} q the media query to target
     * @param {object || function} [handler] specific handler to unregister
     */

/**
 * Represents a single media query, manages it's state and registered handlers for this query
 *
 * @constructor
 * @param {string} query the media query string
 * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design
 */

// Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly

/**
     * add a handler for this query, triggering if already active
     *
     * @param {object} handler
     * @param {function} handler.match callback for when query is activated
     * @param {function} [handler.unmatch] callback for when query is deactivated
     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered
     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?
     */

/**
     * removes the given handler from the collection, and calls it's destroy methods
     *
     * @param {object || function} handler the handler to remove
     */

//remove from array and exit each early

/**
     * Determine whether the media query should be considered a match
     *
     * @return {Boolean} true if media query can be considered a match, false otherwise
     */

/**
     * Clears all handlers and unbinds events
     */

/*
        * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match
        */

/**
 * Delegate to handle a media query being matched and unmatched.
 *
 * @param {object} options
 * @param {function} options.match callback for when the media query is matched
 * @param {function} [options.unmatch] callback for when the media query is unmatched
 * @param {function} [options.setup] one-time callback triggered the first time a query is matched
 * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?
 * @constructor
 */

/**
     * coordinates setup of the handler
     *
     * @function
     */

/**
     * coordinates setup and triggering of the handler
     *
     * @function
     */

/**
     * coordinates the unmatch event for the handler
     *
     * @function
     */

/**
     * called when a handler is to be destroyed.
     * delegates to the destroy or unmatch callbacks, depending on availability.
     *
     * @function
     */

/**
     * determines equality by reference.
     * if object is supplied compare options, if function, compare match callback
     *
     * @function
     * @param {object || function} [target] the target for comparison
     */

// If url is already wrapped in quotes, remove them

// Should url be wrapped?

// See https://drafts.csswg.org/css-values-3/#urls

// module.parent = undefined by default

// polyfill for ie

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// CONCATENATED MODULE: ./node_modules/memoize-one/dist/memoize-one.esm.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// CONCATENATED MODULE: ./node_modules/react-window/dist/index.esm.js

/* unused harmony export VariableSizeGrid */

/* unused harmony export VariableSizeList */

/* unused harmony export FixedSizeGrid */

/* harmony export (binding) */

/* unused harmony export areEqual */

/* unused harmony export shouldComponentUpdate */

// Animation frame based implementation of setTimeout.

// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js

// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.

// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).

// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.

// The safest way to check this is to intentionally set a negative offset,

// and then verify that the subsequent "scroll" event matches the negative offset.

// If it does not match, then we can assume a non-standard RTL scroll implementation.

// Always use explicit constructor for React components.

// It produces less code after transpilation. (#26)

// eslint-disable-next-line no-useless-constructor

// Scroll position may have been updated by cDM/cDU,

// In which case we don't need to trigger another render,

// And we don't want to update state.isScrolling.

// This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).

// It's also easier for this component if we convert offsets to the same format as they would be in for ltr.

// So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.

// Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.

// Clear style cache after state update has been committed.

// This way we don't break pure sCU for items that don't use isScrolling param.

// TODO Deprecate direction "horizontal"

// So we need to determine which browser behavior we're dealing with, and mimic it.

// Read this value AFTER items have been created,

// So their actual sizes (if variable) are taken into consideration.

// Lazily create and cache item styles while scrolling,

// So that pure component sCU will prevent re-renders.

// We maintain this cache, and pass a style prop rather than index,

// So that List can clear cached styles and force item re-render if necessary.

// NOTE: I considered further wrapping individual items with a pure ListItem component.

// This would avoid ever calling the render function for the same index more than once,

// But it would also add the overhead of a lot of components/fibers.

// I assume people already do this (render function returning a class component),

// So my doing it would just unnecessarily double the wrappers.

// "Centered" offset is usually the average of the min and max.

// But near the edges of the list, this doesn't hold true.

// Noop

/* unused harmony export styles */

/* Styles applied to the root element. */

// Reset browser default style.

/* Styles applied to the root element if `absolute={true}`. */

/* Styles applied to the root element if `variant="inset"`. */

/* Styles applied to the root element if `light={true}`. */

/* Styles applied to the root element if `variant="middle"`. */

/* Styles applied to the root element when the parent `ListItem` uses `alignItems="flex-start"`. */

/* Styles applied to the root element if there are children and not `src` or `srcSet`. */

/* Styles applied to the img element if either `src` or `srcSet` is defined. */

// Handle non-square image. The property isn't supported by IE 11.

/* Styles applied to the avatar element. */

/* Styles applied to the action element. */

/* Styles applied to the content wrapper element. */

/* Styles applied to the title Typography element. */

/* Styles applied to the subheader Typography element. */

/* Styles applied to the root element if `component="video, audio, picture, iframe, or img"`. */

// ⚠️ object-fit is not supported by IE 11.

/* Styles applied to the root element if `disableSpacing={false}`. */
